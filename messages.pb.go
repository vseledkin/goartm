// Code generated by protoc-gen-go.
// source: messages.proto
// DO NOT EDIT!

/*
 ArtmConfigureLogging           (           artm.ConfigureLoggingArgs);
const char*               = ArtmGetVersion();
const char*               = ArtmGetLastErrorMessage();

artm.CollectionParserInfo = ArtmParseCollection            (           artm.CollectionParserConfig);

master_id                 = ArtmCreateMasterModel          (           artm.MasterModelConfig);
                            ArtmReconfigureMasterModel     (master_id, artm.MasterModelConfig);
                            ArtmReconfigureTopicName       (master_id, artm.MasterModelConfig);
                            ArtmDisposeMasterComponent     (master_id);

                            ArtmImportBatches              (master_id, artm.ImportBatchesArgs);

                            ArtmGatherDictionary           (master_id, artm.GatherDictionaryArgs);
                            ArtmFilterDictionary           (master_id, artm.FilterDictionaryArgs);
                            ArtmCreateDictionary           (master_id, artm.DictionaryData);
                            ArtmImportDictionary           (master_id, artm.ImportDictionaryArgs);
                            ArtmExportDictionary           (master_id, artm.ExportDictionaryArgs);
artm.DictionaryData       = ArtmRequestDictionary          (master_id, artm.GetDictionaryArgs);

                            ArtmInitializeModel            (master_id, artm.InitializeModelArgs);
                            ArtmExportModel                (master_id, artm.ExportModel);
                            ArtmImportModel                (master_id, artm.ImportModel);
                            ArtmOverwriteTopicModel        (master_id, artm.TopicModel);

                            ArtmFitOfflineMasterModel      (master_id, artm.FitOfflineMasterModelArgs);
                            ArtmFitOnlineMasterModel       (master_id, attm.FitOnlineMasterModelArgs);
artm.ThetaMatrix          = ArtmRequestTransformMasterModel(master_id, artm.TransformMasterModelArgs);
artm.ThetaMatrix          = ArtmRequestTransformMasterModelExternal(master_id, artm.TransformMasterModelArgs);

artm.MasterModelConfig    = ArtmRequestMasterModelConfig   (master_id);
artm.ThetaMatrix          = ArtmRequestThetaMatrix         (master_id, artm.GetThetaMatrix);
artm.ThetaMatrix          = ArtmRequestThetaMatrixExternal (master_id, artm.GetThetaMatrix);
artm.TopicModel           = ArtmRequestTopicModel          (master_id, artm.GetTopicModel);
artm.TopicModel           = ArtmRequestTopicModelExternal  (master_id, artm.GetTopicModel);
artm.ScoreData            = ArtmRequestScore               (master_id, artm.GetScoreValueArgs);
artm.ScoreArray           = ArtmRequestScoreArray          (master_id, artm.GetScoreArrayArgs);
artm.MasterComponentInfo  = ArtmRequestMasterComponentInfo (master_id, artm.GetMasterComponentInfoArgs);

                            ArtmDisposeModel               (master_id, const char* model_name);
                            ArtmDisposeDictionary          (master_id, const char* dictionary_name);
                            ArtmDisposeBatch               (master_id, const char* batch_name);
                            ArtmClearThetaCache            (master_id, artm.ClearThetaCacheArgs);
                            ArtmClearScoreCache            (master_id, artm.ClearScoreCacheArgs);
                            ArtmClearScoreArrayCache       (master_id, artm.ClearScoreArrayCacheArgs);

                            ArtmCopyRequestedMessage        (int length, char* address);
                            ArtmCopyRequestedObject         (int length, char* address);

                            ArtmSetProtobufMessageFormatToJson();
                            ArtmSetProtobufMessageFormatToBinary();
int                       = ArtmProtobufMessageFormatIsJson();

Package artm is a generated protocol buffer package.

File messages.proto defines all messages that can be transefer in or out from BigARTM library.

It is generated from these files:
	messages.proto

It has these top-level messages:
	DoubleArray
	FloatArray
	BoolArray
	IntArray
	StringArray
	Item
	Field
	Batch
	RegularizerSettings
	RegularizerConfig
	SmoothSparseThetaConfig
	SmoothSparsePhiConfig
	DecorrelatorPhiConfig
	MultiLanguagePhiConfig
	LabelRegularizationPhiConfig
	SpecifiedSparsePhiConfig
	ImproveCoherencePhiConfig
	SmoothPtdwConfig
	TopicSelectionThetaConfig
	BitermsPhiConfig
	HierarchySparsingThetaConfig
	TopicSegmentationPtdwConfig
	TransformConfig
	ScoreConfig
	ScoreData
	ScoreArray
	PerplexityScoreConfig
	PerplexityScore
	SparsityThetaScoreConfig
	SparsityThetaScore
	SparsityPhiScoreConfig
	SparsityPhiScore
	ItemsProcessedScoreConfig
	ItemsProcessedScore
	TopTokensScoreConfig
	TopTokensScore
	ThetaSnippetScoreConfig
	ThetaSnippetScore
	TopicKernelScoreConfig
	TopicKernelScore
	TopicMassPhiScoreConfig
	TopicMassPhiScore
	ClassPrecisionScoreConfig
	ClassPrecisionScore
	PeakMemoryScoreConfig
	PeakMemoryScore
	BackgroundTokensRatioScoreConfig
	BackgroundTokensRatioScore
	TopicModel
	ThetaMatrix
	CollectionParserConfig
	CollectionParserInfo
	InitializeModelArgs
	DictionaryData
	FilterDictionaryArgs
	GatherDictionaryArgs
	GetDictionaryArgs
	GetTopicModelArgs
	GetThetaMatrixArgs
	GetScoreValueArgs
	GetScoreArrayArgs
	ExportModelArgs
	ImportModelArgs
	AttachModelArgs
	ProcessBatchesArgs
	ProcessBatchesResult
	MergeModelArgs
	RegularizeModelArgs
	NormalizeModelArgs
	ImportDictionaryArgs
	ExportDictionaryArgs
	DuplicateMasterComponentArgs
	GetMasterComponentInfoArgs
	MasterComponentInfo
	ImportBatchesArgs
	AwaitOperationArgs
	MasterModelConfig
	FitOfflineMasterModelArgs
	FitOnlineMasterModelArgs
	TransformMasterModelArgs
	ConfigureLoggingArgs
	ClearThetaCacheArgs
	ClearScoreCacheArgs
	ClearScoreArrayCacheArgs
*/
package goartm

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RegularizerType int32

const (
	RegularizerType_RegularizerType_SmoothSparseTheta      RegularizerType = 0
	RegularizerType_RegularizerType_SmoothSparsePhi        RegularizerType = 1
	RegularizerType_RegularizerType_DecorrelatorPhi        RegularizerType = 2
	RegularizerType_RegularizerType_MultiLanguagePhi       RegularizerType = 3
	RegularizerType_RegularizerType_LabelRegularizationPhi RegularizerType = 4
	RegularizerType_RegularizerType_SpecifiedSparsePhi     RegularizerType = 5
	RegularizerType_RegularizerType_ImproveCoherencePhi    RegularizerType = 6
	RegularizerType_RegularizerType_SmoothPtdw             RegularizerType = 7
	RegularizerType_RegularizerType_TopicSelectionTheta    RegularizerType = 8
	RegularizerType_RegularizerType_BitermsPhi             RegularizerType = 9
	RegularizerType_RegularizerType_HierarchySparsingTheta RegularizerType = 10
	RegularizerType_RegularizerType_TopicSegmentationPtdw  RegularizerType = 11
	RegularizerType_RegularizerType_Unknown                RegularizerType = 9999
)

var RegularizerType_name = map[int32]string{
	0:    "RegularizerType_SmoothSparseTheta",
	1:    "RegularizerType_SmoothSparsePhi",
	2:    "RegularizerType_DecorrelatorPhi",
	3:    "RegularizerType_MultiLanguagePhi",
	4:    "RegularizerType_LabelRegularizationPhi",
	5:    "RegularizerType_SpecifiedSparsePhi",
	6:    "RegularizerType_ImproveCoherencePhi",
	7:    "RegularizerType_SmoothPtdw",
	8:    "RegularizerType_TopicSelectionTheta",
	9:    "RegularizerType_BitermsPhi",
	10:   "RegularizerType_HierarchySparsingTheta",
	11:   "RegularizerType_TopicSegmentationPtdw",
	9999: "RegularizerType_Unknown",
}
var RegularizerType_value = map[string]int32{
	"RegularizerType_SmoothSparseTheta":      0,
	"RegularizerType_SmoothSparsePhi":        1,
	"RegularizerType_DecorrelatorPhi":        2,
	"RegularizerType_MultiLanguagePhi":       3,
	"RegularizerType_LabelRegularizationPhi": 4,
	"RegularizerType_SpecifiedSparsePhi":     5,
	"RegularizerType_ImproveCoherencePhi":    6,
	"RegularizerType_SmoothPtdw":             7,
	"RegularizerType_TopicSelectionTheta":    8,
	"RegularizerType_BitermsPhi":             9,
	"RegularizerType_HierarchySparsingTheta": 10,
	"RegularizerType_TopicSegmentationPtdw":  11,
	"RegularizerType_Unknown":                9999,
}

func (x RegularizerType) Enum() *RegularizerType {
	p := new(RegularizerType)
	*p = x
	return p
}
func (x RegularizerType) String() string {
	return proto.EnumName(RegularizerType_name, int32(x))
}
func (x *RegularizerType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RegularizerType_value, data, "RegularizerType")
	if err != nil {
		return err
	}
	*x = RegularizerType(value)
	return nil
}
func (RegularizerType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ScoreType int32

const (
	ScoreType_ScoreType_Perplexity            ScoreType = 0
	ScoreType_ScoreType_SparsityTheta         ScoreType = 1
	ScoreType_ScoreType_SparsityPhi           ScoreType = 2
	ScoreType_ScoreType_ItemsProcessed        ScoreType = 3
	ScoreType_ScoreType_TopTokens             ScoreType = 4
	ScoreType_ScoreType_ThetaSnippet          ScoreType = 5
	ScoreType_ScoreType_TopicKernel           ScoreType = 6
	ScoreType_ScoreType_TopicMassPhi          ScoreType = 7
	ScoreType_ScoreType_ClassPrecision        ScoreType = 8
	ScoreType_ScoreType_PeakMemory            ScoreType = 9
	ScoreType_ScoreType_BackgroundTokensRatio ScoreType = 10
	ScoreType_ScoreType_Unknown               ScoreType = 9999
)

var ScoreType_name = map[int32]string{
	0:    "ScoreType_Perplexity",
	1:    "ScoreType_SparsityTheta",
	2:    "ScoreType_SparsityPhi",
	3:    "ScoreType_ItemsProcessed",
	4:    "ScoreType_TopTokens",
	5:    "ScoreType_ThetaSnippet",
	6:    "ScoreType_TopicKernel",
	7:    "ScoreType_TopicMassPhi",
	8:    "ScoreType_ClassPrecision",
	9:    "ScoreType_PeakMemory",
	10:   "ScoreType_BackgroundTokensRatio",
	9999: "ScoreType_Unknown",
}
var ScoreType_value = map[string]int32{
	"ScoreType_Perplexity":            0,
	"ScoreType_SparsityTheta":         1,
	"ScoreType_SparsityPhi":           2,
	"ScoreType_ItemsProcessed":        3,
	"ScoreType_TopTokens":             4,
	"ScoreType_ThetaSnippet":          5,
	"ScoreType_TopicKernel":           6,
	"ScoreType_TopicMassPhi":          7,
	"ScoreType_ClassPrecision":        8,
	"ScoreType_PeakMemory":            9,
	"ScoreType_BackgroundTokensRatio": 10,
	"ScoreType_Unknown":               9999,
}

func (x ScoreType) Enum() *ScoreType {
	p := new(ScoreType)
	*p = x
	return p
}
func (x ScoreType) String() string {
	return proto.EnumName(ScoreType_name, int32(x))
}
func (x *ScoreType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ScoreType_value, data, "ScoreType")
	if err != nil {
		return err
	}
	*x = ScoreType(value)
	return nil
}
func (ScoreType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type MatrixLayout int32

const (
	MatrixLayout_MatrixLayout_Dense  MatrixLayout = 0
	MatrixLayout_MatrixLayout_Sparse MatrixLayout = 1
)

var MatrixLayout_name = map[int32]string{
	0: "MatrixLayout_Dense",
	1: "MatrixLayout_Sparse",
}
var MatrixLayout_value = map[string]int32{
	"MatrixLayout_Dense":  0,
	"MatrixLayout_Sparse": 1,
}

func (x MatrixLayout) Enum() *MatrixLayout {
	p := new(MatrixLayout)
	*p = x
	return p
}
func (x MatrixLayout) String() string {
	return proto.EnumName(MatrixLayout_name, int32(x))
}
func (x *MatrixLayout) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MatrixLayout_value, data, "MatrixLayout")
	if err != nil {
		return err
	}
	*x = MatrixLayout(value)
	return nil
}
func (MatrixLayout) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type ThetaMatrixType int32

const (
	ThetaMatrixType_ThetaMatrixType_None       ThetaMatrixType = 0
	ThetaMatrixType_ThetaMatrixType_Dense      ThetaMatrixType = 1
	ThetaMatrixType_ThetaMatrixType_Sparse     ThetaMatrixType = 2
	ThetaMatrixType_ThetaMatrixType_Cache      ThetaMatrixType = 3
	ThetaMatrixType_ThetaMatrixType_DensePtdw  ThetaMatrixType = 4
	ThetaMatrixType_ThetaMatrixType_SparsePtdw ThetaMatrixType = 5
)

var ThetaMatrixType_name = map[int32]string{
	0: "ThetaMatrixType_None",
	1: "ThetaMatrixType_Dense",
	2: "ThetaMatrixType_Sparse",
	3: "ThetaMatrixType_Cache",
	4: "ThetaMatrixType_DensePtdw",
	5: "ThetaMatrixType_SparsePtdw",
}
var ThetaMatrixType_value = map[string]int32{
	"ThetaMatrixType_None":       0,
	"ThetaMatrixType_Dense":      1,
	"ThetaMatrixType_Sparse":     2,
	"ThetaMatrixType_Cache":      3,
	"ThetaMatrixType_DensePtdw":  4,
	"ThetaMatrixType_SparsePtdw": 5,
}

func (x ThetaMatrixType) Enum() *ThetaMatrixType {
	p := new(ThetaMatrixType)
	*p = x
	return p
}
func (x ThetaMatrixType) String() string {
	return proto.EnumName(ThetaMatrixType_name, int32(x))
}
func (x *ThetaMatrixType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ThetaMatrixType_value, data, "ThetaMatrixType")
	if err != nil {
		return err
	}
	*x = ThetaMatrixType(value)
	return nil
}
func (ThetaMatrixType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type SpecifiedSparsePhiConfig_SparseMode int32

const (
	SpecifiedSparsePhiConfig_SparseTopics SpecifiedSparsePhiConfig_SparseMode = 0
	SpecifiedSparsePhiConfig_SparseTokens SpecifiedSparsePhiConfig_SparseMode = 1
)

var SpecifiedSparsePhiConfig_SparseMode_name = map[int32]string{
	0: "SparseTopics",
	1: "SparseTokens",
}
var SpecifiedSparsePhiConfig_SparseMode_value = map[string]int32{
	"SparseTopics": 0,
	"SparseTokens": 1,
}

func (x SpecifiedSparsePhiConfig_SparseMode) Enum() *SpecifiedSparsePhiConfig_SparseMode {
	p := new(SpecifiedSparsePhiConfig_SparseMode)
	*p = x
	return p
}
func (x SpecifiedSparsePhiConfig_SparseMode) String() string {
	return proto.EnumName(SpecifiedSparsePhiConfig_SparseMode_name, int32(x))
}
func (x *SpecifiedSparsePhiConfig_SparseMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SpecifiedSparsePhiConfig_SparseMode_value, data, "SpecifiedSparsePhiConfig_SparseMode")
	if err != nil {
		return err
	}
	*x = SpecifiedSparsePhiConfig_SparseMode(value)
	return nil
}
func (SpecifiedSparsePhiConfig_SparseMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{15, 0}
}

type SmoothPtdwConfig_SmoothType int32

const (
	SmoothPtdwConfig_MovingAverage SmoothPtdwConfig_SmoothType = 1
	SmoothPtdwConfig_MovingProduct SmoothPtdwConfig_SmoothType = 2
)

var SmoothPtdwConfig_SmoothType_name = map[int32]string{
	1: "MovingAverage",
	2: "MovingProduct",
}
var SmoothPtdwConfig_SmoothType_value = map[string]int32{
	"MovingAverage": 1,
	"MovingProduct": 2,
}

func (x SmoothPtdwConfig_SmoothType) Enum() *SmoothPtdwConfig_SmoothType {
	p := new(SmoothPtdwConfig_SmoothType)
	*p = x
	return p
}
func (x SmoothPtdwConfig_SmoothType) String() string {
	return proto.EnumName(SmoothPtdwConfig_SmoothType_name, int32(x))
}
func (x *SmoothPtdwConfig_SmoothType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SmoothPtdwConfig_SmoothType_value, data, "SmoothPtdwConfig_SmoothType")
	if err != nil {
		return err
	}
	*x = SmoothPtdwConfig_SmoothType(value)
	return nil
}
func (SmoothPtdwConfig_SmoothType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{17, 0}
}

type TransformConfig_TransformType int32

const (
	TransformConfig_Logarithm  TransformConfig_TransformType = 0
	TransformConfig_Polynomial TransformConfig_TransformType = 1
	TransformConfig_Constant   TransformConfig_TransformType = 2
)

var TransformConfig_TransformType_name = map[int32]string{
	0: "Logarithm",
	1: "Polynomial",
	2: "Constant",
}
var TransformConfig_TransformType_value = map[string]int32{
	"Logarithm":  0,
	"Polynomial": 1,
	"Constant":   2,
}

func (x TransformConfig_TransformType) Enum() *TransformConfig_TransformType {
	p := new(TransformConfig_TransformType)
	*p = x
	return p
}
func (x TransformConfig_TransformType) String() string {
	return proto.EnumName(TransformConfig_TransformType_name, int32(x))
}
func (x *TransformConfig_TransformType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TransformConfig_TransformType_value, data, "TransformConfig_TransformType")
	if err != nil {
		return err
	}
	*x = TransformConfig_TransformType(value)
	return nil
}
func (TransformConfig_TransformType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{22, 0}
}

type PerplexityScoreConfig_Type int32

const (
	PerplexityScoreConfig_UnigramDocumentModel   PerplexityScoreConfig_Type = 0
	PerplexityScoreConfig_UnigramCollectionModel PerplexityScoreConfig_Type = 1
)

var PerplexityScoreConfig_Type_name = map[int32]string{
	0: "UnigramDocumentModel",
	1: "UnigramCollectionModel",
}
var PerplexityScoreConfig_Type_value = map[string]int32{
	"UnigramDocumentModel":   0,
	"UnigramCollectionModel": 1,
}

func (x PerplexityScoreConfig_Type) Enum() *PerplexityScoreConfig_Type {
	p := new(PerplexityScoreConfig_Type)
	*p = x
	return p
}
func (x PerplexityScoreConfig_Type) String() string {
	return proto.EnumName(PerplexityScoreConfig_Type_name, int32(x))
}
func (x *PerplexityScoreConfig_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PerplexityScoreConfig_Type_value, data, "PerplexityScoreConfig_Type")
	if err != nil {
		return err
	}
	*x = PerplexityScoreConfig_Type(value)
	return nil
}
func (PerplexityScoreConfig_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{26, 0}
}

type CollectionParserConfig_CollectionFormat int32

const (
	CollectionParserConfig_BagOfWordsUci CollectionParserConfig_CollectionFormat = 0
	CollectionParserConfig_MatrixMarket  CollectionParserConfig_CollectionFormat = 1
	CollectionParserConfig_VowpalWabbit  CollectionParserConfig_CollectionFormat = 2
)

var CollectionParserConfig_CollectionFormat_name = map[int32]string{
	0: "BagOfWordsUci",
	1: "MatrixMarket",
	2: "VowpalWabbit",
}
var CollectionParserConfig_CollectionFormat_value = map[string]int32{
	"BagOfWordsUci": 0,
	"MatrixMarket":  1,
	"VowpalWabbit":  2,
}

func (x CollectionParserConfig_CollectionFormat) Enum() *CollectionParserConfig_CollectionFormat {
	p := new(CollectionParserConfig_CollectionFormat)
	*p = x
	return p
}
func (x CollectionParserConfig_CollectionFormat) String() string {
	return proto.EnumName(CollectionParserConfig_CollectionFormat_name, int32(x))
}
func (x *CollectionParserConfig_CollectionFormat) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CollectionParserConfig_CollectionFormat_value, data, "CollectionParserConfig_CollectionFormat")
	if err != nil {
		return err
	}
	*x = CollectionParserConfig_CollectionFormat(value)
	return nil
}
func (CollectionParserConfig_CollectionFormat) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{50, 0}
}

type CollectionParserConfig_BatchNameType int32

const (
	CollectionParserConfig_Guid CollectionParserConfig_BatchNameType = 0
	CollectionParserConfig_Code CollectionParserConfig_BatchNameType = 1
)

var CollectionParserConfig_BatchNameType_name = map[int32]string{
	0: "Guid",
	1: "Code",
}
var CollectionParserConfig_BatchNameType_value = map[string]int32{
	"Guid": 0,
	"Code": 1,
}

func (x CollectionParserConfig_BatchNameType) Enum() *CollectionParserConfig_BatchNameType {
	p := new(CollectionParserConfig_BatchNameType)
	*p = x
	return p
}
func (x CollectionParserConfig_BatchNameType) String() string {
	return proto.EnumName(CollectionParserConfig_BatchNameType_name, int32(x))
}
func (x *CollectionParserConfig_BatchNameType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CollectionParserConfig_BatchNameType_value, data, "CollectionParserConfig_BatchNameType")
	if err != nil {
		return err
	}
	*x = CollectionParserConfig_BatchNameType(value)
	return nil
}
func (CollectionParserConfig_BatchNameType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{50, 1}
}

// Represents an array of double-precision floating point values
type DoubleArray struct {
	Value            []float64 `protobuf:"fixed64,1,rep,packed,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *DoubleArray) Reset()                    { *m = DoubleArray{} }
func (m *DoubleArray) String() string            { return proto.CompactTextString(m) }
func (*DoubleArray) ProtoMessage()               {}
func (*DoubleArray) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DoubleArray) GetValue() []float64 {
	if m != nil {
		return m.Value
	}
	return nil
}

// Represents an array of single-precision floating point values
type FloatArray struct {
	Value            []float32 `protobuf:"fixed32,1,rep,packed,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *FloatArray) Reset()                    { *m = FloatArray{} }
func (m *FloatArray) String() string            { return proto.CompactTextString(m) }
func (*FloatArray) ProtoMessage()               {}
func (*FloatArray) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *FloatArray) GetValue() []float32 {
	if m != nil {
		return m.Value
	}
	return nil
}

// Represents an array of boolean values
type BoolArray struct {
	Value            []bool `protobuf:"varint,1,rep,packed,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BoolArray) Reset()                    { *m = BoolArray{} }
func (m *BoolArray) String() string            { return proto.CompactTextString(m) }
func (*BoolArray) ProtoMessage()               {}
func (*BoolArray) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *BoolArray) GetValue() []bool {
	if m != nil {
		return m.Value
	}
	return nil
}

// Represents an array of integer values
type IntArray struct {
	Value            []int32 `protobuf:"varint,1,rep,packed,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *IntArray) Reset()                    { *m = IntArray{} }
func (m *IntArray) String() string            { return proto.CompactTextString(m) }
func (*IntArray) ProtoMessage()               {}
func (*IntArray) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *IntArray) GetValue() []int32 {
	if m != nil {
		return m.Value
	}
	return nil
}

// Represents an array of string values
type StringArray struct {
	Value            []string `protobuf:"bytes,1,rep,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *StringArray) Reset()                    { *m = StringArray{} }
func (m *StringArray) String() string            { return proto.CompactTextString(m) }
func (*StringArray) ProtoMessage()               {}
func (*StringArray) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *StringArray) GetValue() []string {
	if m != nil {
		return m.Value
	}
	return nil
}

// Represents a unit of textual information.
type Item struct {
	Id               *int32    `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Field            []*Field  `protobuf:"bytes,2,rep,name=field" json:"field,omitempty"`
	Title            *string   `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	TokenId          []int32   `protobuf:"varint,4,rep,name=token_id,json=tokenId" json:"token_id,omitempty"`
	TokenWeight      []float32 `protobuf:"fixed32,5,rep,name=token_weight,json=tokenWeight" json:"token_weight,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *Item) Reset()                    { *m = Item{} }
func (m *Item) String() string            { return proto.CompactTextString(m) }
func (*Item) ProtoMessage()               {}
func (*Item) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Item) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Item) GetField() []*Field {
	if m != nil {
		return m.Field
	}
	return nil
}

func (m *Item) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *Item) GetTokenId() []int32 {
	if m != nil {
		return m.TokenId
	}
	return nil
}

func (m *Item) GetTokenWeight() []float32 {
	if m != nil {
		return m.TokenWeight
	}
	return nil
}

// Represents a field withing an item.
// Obsolete in BigARTM v0.8.0
type Field struct {
	Name             *string   `protobuf:"bytes,1,opt,name=name,def=@body" json:"name,omitempty"`
	TokenId          []int32   `protobuf:"varint,2,rep,name=token_id,json=tokenId" json:"token_id,omitempty"`
	TokenCount       []int32   `protobuf:"varint,3,rep,name=token_count,json=tokenCount" json:"token_count,omitempty"`
	TokenOffset      []int32   `protobuf:"varint,4,rep,name=token_offset,json=tokenOffset" json:"token_offset,omitempty"`
	StringValue      *string   `protobuf:"bytes,5,opt,name=string_value,json=stringValue" json:"string_value,omitempty"`
	IntValue         *int64    `protobuf:"varint,6,opt,name=int_value,json=intValue" json:"int_value,omitempty"`
	DoubleValue      *float64  `protobuf:"fixed64,7,opt,name=double_value,json=doubleValue" json:"double_value,omitempty"`
	DateValue        *string   `protobuf:"bytes,8,opt,name=date_value,json=dateValue" json:"date_value,omitempty"`
	StringArray      []string  `protobuf:"bytes,16,rep,name=string_array,json=stringArray" json:"string_array,omitempty"`
	IntArray         []int64   `protobuf:"varint,17,rep,name=int_array,json=intArray" json:"int_array,omitempty"`
	DoubleArray      []float64 `protobuf:"fixed64,18,rep,name=double_array,json=doubleArray" json:"double_array,omitempty"`
	DateArray        []string  `protobuf:"bytes,19,rep,name=date_array,json=dateArray" json:"date_array,omitempty"`
	TokenWeight      []float32 `protobuf:"fixed32,20,rep,name=token_weight,json=tokenWeight" json:"token_weight,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *Field) Reset()                    { *m = Field{} }
func (m *Field) String() string            { return proto.CompactTextString(m) }
func (*Field) ProtoMessage()               {}
func (*Field) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

const Default_Field_Name string = "@body"

func (m *Field) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return Default_Field_Name
}

func (m *Field) GetTokenId() []int32 {
	if m != nil {
		return m.TokenId
	}
	return nil
}

func (m *Field) GetTokenCount() []int32 {
	if m != nil {
		return m.TokenCount
	}
	return nil
}

func (m *Field) GetTokenOffset() []int32 {
	if m != nil {
		return m.TokenOffset
	}
	return nil
}

func (m *Field) GetStringValue() string {
	if m != nil && m.StringValue != nil {
		return *m.StringValue
	}
	return ""
}

func (m *Field) GetIntValue() int64 {
	if m != nil && m.IntValue != nil {
		return *m.IntValue
	}
	return 0
}

func (m *Field) GetDoubleValue() float64 {
	if m != nil && m.DoubleValue != nil {
		return *m.DoubleValue
	}
	return 0
}

func (m *Field) GetDateValue() string {
	if m != nil && m.DateValue != nil {
		return *m.DateValue
	}
	return ""
}

func (m *Field) GetStringArray() []string {
	if m != nil {
		return m.StringArray
	}
	return nil
}

func (m *Field) GetIntArray() []int64 {
	if m != nil {
		return m.IntArray
	}
	return nil
}

func (m *Field) GetDoubleArray() []float64 {
	if m != nil {
		return m.DoubleArray
	}
	return nil
}

func (m *Field) GetDateArray() []string {
	if m != nil {
		return m.DateArray
	}
	return nil
}

func (m *Field) GetTokenWeight() []float32 {
	if m != nil {
		return m.TokenWeight
	}
	return nil
}

// Represents a set of items.
type Batch struct {
	Token            []string `protobuf:"bytes,1,rep,name=token" json:"token,omitempty"`
	ClassId          []string `protobuf:"bytes,2,rep,name=class_id,json=classId" json:"class_id,omitempty"`
	Item             []*Item  `protobuf:"bytes,3,rep,name=item" json:"item,omitempty"`
	Description      *string  `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	Id               *string  `protobuf:"bytes,5,opt,name=id" json:"id,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Batch) Reset()                    { *m = Batch{} }
func (m *Batch) String() string            { return proto.CompactTextString(m) }
func (*Batch) ProtoMessage()               {}
func (*Batch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Batch) GetToken() []string {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *Batch) GetClassId() []string {
	if m != nil {
		return m.ClassId
	}
	return nil
}

func (m *Batch) GetItem() []*Item {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *Batch) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *Batch) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

type RegularizerSettings struct {
	Name             *string  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Tau              *float64 `protobuf:"fixed64,2,opt,name=tau" json:"tau,omitempty"`
	Gamma            *float64 `protobuf:"fixed64,3,opt,name=gamma" json:"gamma,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *RegularizerSettings) Reset()                    { *m = RegularizerSettings{} }
func (m *RegularizerSettings) String() string            { return proto.CompactTextString(m) }
func (*RegularizerSettings) ProtoMessage()               {}
func (*RegularizerSettings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *RegularizerSettings) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *RegularizerSettings) GetTau() float64 {
	if m != nil && m.Tau != nil {
		return *m.Tau
	}
	return 0
}

func (m *RegularizerSettings) GetGamma() float64 {
	if m != nil && m.Gamma != nil {
		return *m.Gamma
	}
	return 0
}

// Represents a configuration of a general regularizer
type RegularizerConfig struct {
	Name             *string          `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Type             *RegularizerType `protobuf:"varint,2,opt,name=type,enum=artm.RegularizerType,def=9999" json:"type,omitempty"`
	Config           []byte           `protobuf:"bytes,3,opt,name=config" json:"config,omitempty"`
	Tau              *float32         `protobuf:"fixed32,4,opt,name=tau" json:"tau,omitempty"`
	Gamma            *float64         `protobuf:"fixed64,5,opt,name=gamma" json:"gamma,omitempty"`
	ConfigJson       *string          `protobuf:"bytes,6,opt,name=config_json,json=configJson" json:"config_json,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *RegularizerConfig) Reset()                    { *m = RegularizerConfig{} }
func (m *RegularizerConfig) String() string            { return proto.CompactTextString(m) }
func (*RegularizerConfig) ProtoMessage()               {}
func (*RegularizerConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

const Default_RegularizerConfig_Type RegularizerType = RegularizerType_RegularizerType_Unknown

func (m *RegularizerConfig) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *RegularizerConfig) GetType() RegularizerType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Default_RegularizerConfig_Type
}

func (m *RegularizerConfig) GetConfig() []byte {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *RegularizerConfig) GetTau() float32 {
	if m != nil && m.Tau != nil {
		return *m.Tau
	}
	return 0
}

func (m *RegularizerConfig) GetGamma() float64 {
	if m != nil && m.Gamma != nil {
		return *m.Gamma
	}
	return 0
}

func (m *RegularizerConfig) GetConfigJson() string {
	if m != nil && m.ConfigJson != nil {
		return *m.ConfigJson
	}
	return ""
}

// Represents a configuration of a SmoothSparse Theta regularizer
type SmoothSparseThetaConfig struct {
	TopicName           []string         `protobuf:"bytes,1,rep,name=topic_name,json=topicName" json:"topic_name,omitempty"`
	AlphaIter           []float32        `protobuf:"fixed32,2,rep,name=alpha_iter,json=alphaIter" json:"alpha_iter,omitempty"`
	TransformConfig     *TransformConfig `protobuf:"bytes,3,opt,name=transform_config,json=transformConfig" json:"transform_config,omitempty"`
	ItemTitle           []string         `protobuf:"bytes,4,rep,name=item_title,json=itemTitle" json:"item_title,omitempty"`
	ItemTopicMultiplier []*DoubleArray   `protobuf:"bytes,5,rep,name=item_topic_multiplier,json=itemTopicMultiplier" json:"item_topic_multiplier,omitempty"`
	XXX_unrecognized    []byte           `json:"-"`
}

func (m *SmoothSparseThetaConfig) Reset()                    { *m = SmoothSparseThetaConfig{} }
func (m *SmoothSparseThetaConfig) String() string            { return proto.CompactTextString(m) }
func (*SmoothSparseThetaConfig) ProtoMessage()               {}
func (*SmoothSparseThetaConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *SmoothSparseThetaConfig) GetTopicName() []string {
	if m != nil {
		return m.TopicName
	}
	return nil
}

func (m *SmoothSparseThetaConfig) GetAlphaIter() []float32 {
	if m != nil {
		return m.AlphaIter
	}
	return nil
}

func (m *SmoothSparseThetaConfig) GetTransformConfig() *TransformConfig {
	if m != nil {
		return m.TransformConfig
	}
	return nil
}

func (m *SmoothSparseThetaConfig) GetItemTitle() []string {
	if m != nil {
		return m.ItemTitle
	}
	return nil
}

func (m *SmoothSparseThetaConfig) GetItemTopicMultiplier() []*DoubleArray {
	if m != nil {
		return m.ItemTopicMultiplier
	}
	return nil
}

// Represents a configuration of a SmoothSparse Phi regularizer
type SmoothSparsePhiConfig struct {
	TopicName        []string         `protobuf:"bytes,1,rep,name=topic_name,json=topicName" json:"topic_name,omitempty"`
	ClassId          []string         `protobuf:"bytes,2,rep,name=class_id,json=classId" json:"class_id,omitempty"`
	DictionaryName   *string          `protobuf:"bytes,3,opt,name=dictionary_name,json=dictionaryName" json:"dictionary_name,omitempty"`
	TransformConfig  *TransformConfig `protobuf:"bytes,4,opt,name=transform_config,json=transformConfig" json:"transform_config,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *SmoothSparsePhiConfig) Reset()                    { *m = SmoothSparsePhiConfig{} }
func (m *SmoothSparsePhiConfig) String() string            { return proto.CompactTextString(m) }
func (*SmoothSparsePhiConfig) ProtoMessage()               {}
func (*SmoothSparsePhiConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *SmoothSparsePhiConfig) GetTopicName() []string {
	if m != nil {
		return m.TopicName
	}
	return nil
}

func (m *SmoothSparsePhiConfig) GetClassId() []string {
	if m != nil {
		return m.ClassId
	}
	return nil
}

func (m *SmoothSparsePhiConfig) GetDictionaryName() string {
	if m != nil && m.DictionaryName != nil {
		return *m.DictionaryName
	}
	return ""
}

func (m *SmoothSparsePhiConfig) GetTransformConfig() *TransformConfig {
	if m != nil {
		return m.TransformConfig
	}
	return nil
}

// Represents a configuration of a Decorrelator Phi regularizer
type DecorrelatorPhiConfig struct {
	TopicName        []string `protobuf:"bytes,1,rep,name=topic_name,json=topicName" json:"topic_name,omitempty"`
	ClassId          []string `protobuf:"bytes,2,rep,name=class_id,json=classId" json:"class_id,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *DecorrelatorPhiConfig) Reset()                    { *m = DecorrelatorPhiConfig{} }
func (m *DecorrelatorPhiConfig) String() string            { return proto.CompactTextString(m) }
func (*DecorrelatorPhiConfig) ProtoMessage()               {}
func (*DecorrelatorPhiConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *DecorrelatorPhiConfig) GetTopicName() []string {
	if m != nil {
		return m.TopicName
	}
	return nil
}

func (m *DecorrelatorPhiConfig) GetClassId() []string {
	if m != nil {
		return m.ClassId
	}
	return nil
}

// Represents a configuration of a MultiLanguage Phi regularizer
type MultiLanguagePhiConfig struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *MultiLanguagePhiConfig) Reset()                    { *m = MultiLanguagePhiConfig{} }
func (m *MultiLanguagePhiConfig) String() string            { return proto.CompactTextString(m) }
func (*MultiLanguagePhiConfig) ProtoMessage()               {}
func (*MultiLanguagePhiConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

type LabelRegularizationPhiConfig struct {
	TopicName        []string `protobuf:"bytes,1,rep,name=topic_name,json=topicName" json:"topic_name,omitempty"`
	ClassId          []string `protobuf:"bytes,2,rep,name=class_id,json=classId" json:"class_id,omitempty"`
	DictionaryName   *string  `protobuf:"bytes,3,opt,name=dictionary_name,json=dictionaryName" json:"dictionary_name,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *LabelRegularizationPhiConfig) Reset()                    { *m = LabelRegularizationPhiConfig{} }
func (m *LabelRegularizationPhiConfig) String() string            { return proto.CompactTextString(m) }
func (*LabelRegularizationPhiConfig) ProtoMessage()               {}
func (*LabelRegularizationPhiConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *LabelRegularizationPhiConfig) GetTopicName() []string {
	if m != nil {
		return m.TopicName
	}
	return nil
}

func (m *LabelRegularizationPhiConfig) GetClassId() []string {
	if m != nil {
		return m.ClassId
	}
	return nil
}

func (m *LabelRegularizationPhiConfig) GetDictionaryName() string {
	if m != nil && m.DictionaryName != nil {
		return *m.DictionaryName
	}
	return ""
}

type SpecifiedSparsePhiConfig struct {
	TopicName            []string                             `protobuf:"bytes,1,rep,name=topic_name,json=topicName" json:"topic_name,omitempty"`
	ClassId              *string                              `protobuf:"bytes,2,opt,name=class_id,json=classId,def=@default_class" json:"class_id,omitempty"`
	MaxElementsCount     *int32                               `protobuf:"varint,3,opt,name=max_elements_count,json=maxElementsCount,def=20" json:"max_elements_count,omitempty"`
	ProbabilityThreshold *float32                             `protobuf:"fixed32,4,opt,name=probability_threshold,json=probabilityThreshold,def=0.99" json:"probability_threshold,omitempty"`
	Mode                 *SpecifiedSparsePhiConfig_SparseMode `protobuf:"varint,5,opt,name=mode,enum=artm.SpecifiedSparsePhiConfig_SparseMode,def=0" json:"mode,omitempty"`
	XXX_unrecognized     []byte                               `json:"-"`
}

func (m *SpecifiedSparsePhiConfig) Reset()                    { *m = SpecifiedSparsePhiConfig{} }
func (m *SpecifiedSparsePhiConfig) String() string            { return proto.CompactTextString(m) }
func (*SpecifiedSparsePhiConfig) ProtoMessage()               {}
func (*SpecifiedSparsePhiConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

const Default_SpecifiedSparsePhiConfig_ClassId string = "@default_class"
const Default_SpecifiedSparsePhiConfig_MaxElementsCount int32 = 20
const Default_SpecifiedSparsePhiConfig_ProbabilityThreshold float32 = 0.99
const Default_SpecifiedSparsePhiConfig_Mode SpecifiedSparsePhiConfig_SparseMode = SpecifiedSparsePhiConfig_SparseTopics

func (m *SpecifiedSparsePhiConfig) GetTopicName() []string {
	if m != nil {
		return m.TopicName
	}
	return nil
}

func (m *SpecifiedSparsePhiConfig) GetClassId() string {
	if m != nil && m.ClassId != nil {
		return *m.ClassId
	}
	return Default_SpecifiedSparsePhiConfig_ClassId
}

func (m *SpecifiedSparsePhiConfig) GetMaxElementsCount() int32 {
	if m != nil && m.MaxElementsCount != nil {
		return *m.MaxElementsCount
	}
	return Default_SpecifiedSparsePhiConfig_MaxElementsCount
}

func (m *SpecifiedSparsePhiConfig) GetProbabilityThreshold() float32 {
	if m != nil && m.ProbabilityThreshold != nil {
		return *m.ProbabilityThreshold
	}
	return Default_SpecifiedSparsePhiConfig_ProbabilityThreshold
}

func (m *SpecifiedSparsePhiConfig) GetMode() SpecifiedSparsePhiConfig_SparseMode {
	if m != nil && m.Mode != nil {
		return *m.Mode
	}
	return Default_SpecifiedSparsePhiConfig_Mode
}

// Represents a configuration of a ImproveCoherence Phi regularizer
type ImproveCoherencePhiConfig struct {
	TopicName        []string `protobuf:"bytes,1,rep,name=topic_name,json=topicName" json:"topic_name,omitempty"`
	ClassId          []string `protobuf:"bytes,2,rep,name=class_id,json=classId" json:"class_id,omitempty"`
	DictionaryName   *string  `protobuf:"bytes,3,opt,name=dictionary_name,json=dictionaryName" json:"dictionary_name,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *ImproveCoherencePhiConfig) Reset()                    { *m = ImproveCoherencePhiConfig{} }
func (m *ImproveCoherencePhiConfig) String() string            { return proto.CompactTextString(m) }
func (*ImproveCoherencePhiConfig) ProtoMessage()               {}
func (*ImproveCoherencePhiConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *ImproveCoherencePhiConfig) GetTopicName() []string {
	if m != nil {
		return m.TopicName
	}
	return nil
}

func (m *ImproveCoherencePhiConfig) GetClassId() []string {
	if m != nil {
		return m.ClassId
	}
	return nil
}

func (m *ImproveCoherencePhiConfig) GetDictionaryName() string {
	if m != nil && m.DictionaryName != nil {
		return *m.DictionaryName
	}
	return ""
}

// Represents a configuration of a Smooth Ptdw regularizer
type SmoothPtdwConfig struct {
	Type             *SmoothPtdwConfig_SmoothType `protobuf:"varint,1,opt,name=type,enum=artm.SmoothPtdwConfig_SmoothType,def=1" json:"type,omitempty"`
	Window           *int32                       `protobuf:"varint,3,opt,name=window,def=10" json:"window,omitempty"`
	Threshold        *float64                     `protobuf:"fixed64,4,opt,name=threshold,def=1" json:"threshold,omitempty"`
	XXX_unrecognized []byte                       `json:"-"`
}

func (m *SmoothPtdwConfig) Reset()                    { *m = SmoothPtdwConfig{} }
func (m *SmoothPtdwConfig) String() string            { return proto.CompactTextString(m) }
func (*SmoothPtdwConfig) ProtoMessage()               {}
func (*SmoothPtdwConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

const Default_SmoothPtdwConfig_Type SmoothPtdwConfig_SmoothType = SmoothPtdwConfig_MovingAverage
const Default_SmoothPtdwConfig_Window int32 = 10
const Default_SmoothPtdwConfig_Threshold float64 = 1

func (m *SmoothPtdwConfig) GetType() SmoothPtdwConfig_SmoothType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Default_SmoothPtdwConfig_Type
}

func (m *SmoothPtdwConfig) GetWindow() int32 {
	if m != nil && m.Window != nil {
		return *m.Window
	}
	return Default_SmoothPtdwConfig_Window
}

func (m *SmoothPtdwConfig) GetThreshold() float64 {
	if m != nil && m.Threshold != nil {
		return *m.Threshold
	}
	return Default_SmoothPtdwConfig_Threshold
}

// Represents a configuration of a TopicSelection Theta regularizer
type TopicSelectionThetaConfig struct {
	TopicName        []string  `protobuf:"bytes,1,rep,name=topic_name,json=topicName" json:"topic_name,omitempty"`
	TopicValue       []float32 `protobuf:"fixed32,2,rep,name=topic_value,json=topicValue" json:"topic_value,omitempty"`
	AlphaIter        []float32 `protobuf:"fixed32,3,rep,name=alpha_iter,json=alphaIter" json:"alpha_iter,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *TopicSelectionThetaConfig) Reset()                    { *m = TopicSelectionThetaConfig{} }
func (m *TopicSelectionThetaConfig) String() string            { return proto.CompactTextString(m) }
func (*TopicSelectionThetaConfig) ProtoMessage()               {}
func (*TopicSelectionThetaConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *TopicSelectionThetaConfig) GetTopicName() []string {
	if m != nil {
		return m.TopicName
	}
	return nil
}

func (m *TopicSelectionThetaConfig) GetTopicValue() []float32 {
	if m != nil {
		return m.TopicValue
	}
	return nil
}

func (m *TopicSelectionThetaConfig) GetAlphaIter() []float32 {
	if m != nil {
		return m.AlphaIter
	}
	return nil
}

// Represents a configuration of a Biterms Phi regularizer
type BitermsPhiConfig struct {
	TopicName        []string `protobuf:"bytes,1,rep,name=topic_name,json=topicName" json:"topic_name,omitempty"`
	ClassId          []string `protobuf:"bytes,2,rep,name=class_id,json=classId" json:"class_id,omitempty"`
	DictionaryName   *string  `protobuf:"bytes,3,opt,name=dictionary_name,json=dictionaryName" json:"dictionary_name,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *BitermsPhiConfig) Reset()                    { *m = BitermsPhiConfig{} }
func (m *BitermsPhiConfig) String() string            { return proto.CompactTextString(m) }
func (*BitermsPhiConfig) ProtoMessage()               {}
func (*BitermsPhiConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *BitermsPhiConfig) GetTopicName() []string {
	if m != nil {
		return m.TopicName
	}
	return nil
}

func (m *BitermsPhiConfig) GetClassId() []string {
	if m != nil {
		return m.ClassId
	}
	return nil
}

func (m *BitermsPhiConfig) GetDictionaryName() string {
	if m != nil && m.DictionaryName != nil {
		return *m.DictionaryName
	}
	return ""
}

// Represents a configuration of a HierarchySparsing Theta regularizer
type HierarchySparsingThetaConfig struct {
	TopicName             []string  `protobuf:"bytes,1,rep,name=topic_name,json=topicName" json:"topic_name,omitempty"`
	ParentTopicProportion []float32 `protobuf:"fixed32,2,rep,name=parent_topic_proportion,json=parentTopicProportion" json:"parent_topic_proportion,omitempty"`
	AlphaIter             []float32 `protobuf:"fixed32,3,rep,name=alpha_iter,json=alphaIter" json:"alpha_iter,omitempty"`
	XXX_unrecognized      []byte    `json:"-"`
}

func (m *HierarchySparsingThetaConfig) Reset()                    { *m = HierarchySparsingThetaConfig{} }
func (m *HierarchySparsingThetaConfig) String() string            { return proto.CompactTextString(m) }
func (*HierarchySparsingThetaConfig) ProtoMessage()               {}
func (*HierarchySparsingThetaConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *HierarchySparsingThetaConfig) GetTopicName() []string {
	if m != nil {
		return m.TopicName
	}
	return nil
}

func (m *HierarchySparsingThetaConfig) GetParentTopicProportion() []float32 {
	if m != nil {
		return m.ParentTopicProportion
	}
	return nil
}

func (m *HierarchySparsingThetaConfig) GetAlphaIter() []float32 {
	if m != nil {
		return m.AlphaIter
	}
	return nil
}

// Represents a configuration of a Topic Segmentation regularizer
type TopicSegmentationPtdwConfig struct {
	BackgroundTopicNames []string `protobuf:"bytes,1,rep,name=background_topic_names,json=backgroundTopicNames" json:"background_topic_names,omitempty"`
	Window               *int32   `protobuf:"varint,3,opt,name=window,def=10" json:"window,omitempty"`
	Threshold            *float64 `protobuf:"fixed64,4,opt,name=threshold,def=0.5" json:"threshold,omitempty"`
	XXX_unrecognized     []byte   `json:"-"`
}

func (m *TopicSegmentationPtdwConfig) Reset()                    { *m = TopicSegmentationPtdwConfig{} }
func (m *TopicSegmentationPtdwConfig) String() string            { return proto.CompactTextString(m) }
func (*TopicSegmentationPtdwConfig) ProtoMessage()               {}
func (*TopicSegmentationPtdwConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

const Default_TopicSegmentationPtdwConfig_Window int32 = 10
const Default_TopicSegmentationPtdwConfig_Threshold float64 = 0.5

func (m *TopicSegmentationPtdwConfig) GetBackgroundTopicNames() []string {
	if m != nil {
		return m.BackgroundTopicNames
	}
	return nil
}

func (m *TopicSegmentationPtdwConfig) GetWindow() int32 {
	if m != nil && m.Window != nil {
		return *m.Window
	}
	return Default_TopicSegmentationPtdwConfig_Window
}

func (m *TopicSegmentationPtdwConfig) GetThreshold() float64 {
	if m != nil && m.Threshold != nil {
		return *m.Threshold
	}
	return Default_TopicSegmentationPtdwConfig_Threshold
}

// Represents the transform functions
type TransformConfig struct {
	Type             *TransformConfig_TransformType `protobuf:"varint,1,opt,name=type,enum=artm.TransformConfig_TransformType,def=2" json:"type,omitempty"`
	N                *float64                       `protobuf:"fixed64,2,opt,name=n,def=1" json:"n,omitempty"`
	A                *float64                       `protobuf:"fixed64,3,opt,name=a,def=1" json:"a,omitempty"`
	XXX_unrecognized []byte                         `json:"-"`
}

func (m *TransformConfig) Reset()                    { *m = TransformConfig{} }
func (m *TransformConfig) String() string            { return proto.CompactTextString(m) }
func (*TransformConfig) ProtoMessage()               {}
func (*TransformConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

const Default_TransformConfig_Type TransformConfig_TransformType = TransformConfig_Constant
const Default_TransformConfig_N float64 = 1
const Default_TransformConfig_A float64 = 1

func (m *TransformConfig) GetType() TransformConfig_TransformType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Default_TransformConfig_Type
}

func (m *TransformConfig) GetN() float64 {
	if m != nil && m.N != nil {
		return *m.N
	}
	return Default_TransformConfig_N
}

func (m *TransformConfig) GetA() float64 {
	if m != nil && m.A != nil {
		return *m.A
	}
	return Default_TransformConfig_A
}

// Represents a configuration of a general score
type ScoreConfig struct {
	Name             *string    `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Type             *ScoreType `protobuf:"varint,2,opt,name=type,enum=artm.ScoreType,def=9999" json:"type,omitempty"`
	Config           []byte     `protobuf:"bytes,3,opt,name=config" json:"config,omitempty"`
	ModelName        *string    `protobuf:"bytes,4,opt,name=model_name,json=modelName" json:"model_name,omitempty"`
	ConfigJson       *string    `protobuf:"bytes,5,opt,name=config_json,json=configJson" json:"config_json,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *ScoreConfig) Reset()                    { *m = ScoreConfig{} }
func (m *ScoreConfig) String() string            { return proto.CompactTextString(m) }
func (*ScoreConfig) ProtoMessage()               {}
func (*ScoreConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

const Default_ScoreConfig_Type ScoreType = ScoreType_ScoreType_Unknown

func (m *ScoreConfig) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *ScoreConfig) GetType() ScoreType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Default_ScoreConfig_Type
}

func (m *ScoreConfig) GetConfig() []byte {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *ScoreConfig) GetModelName() string {
	if m != nil && m.ModelName != nil {
		return *m.ModelName
	}
	return ""
}

func (m *ScoreConfig) GetConfigJson() string {
	if m != nil && m.ConfigJson != nil {
		return *m.ConfigJson
	}
	return ""
}

// Represents a result of score calculation
type ScoreData struct {
	Name             *string    `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Type             *ScoreType `protobuf:"varint,2,opt,name=type,enum=artm.ScoreType,def=9999" json:"type,omitempty"`
	Data             []byte     `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	DataJson         *string    `protobuf:"bytes,4,opt,name=data_json,json=dataJson" json:"data_json,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *ScoreData) Reset()                    { *m = ScoreData{} }
func (m *ScoreData) String() string            { return proto.CompactTextString(m) }
func (*ScoreData) ProtoMessage()               {}
func (*ScoreData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

const Default_ScoreData_Type ScoreType = ScoreType_ScoreType_Unknown

func (m *ScoreData) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *ScoreData) GetType() ScoreType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Default_ScoreData_Type
}

func (m *ScoreData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ScoreData) GetDataJson() string {
	if m != nil && m.DataJson != nil {
		return *m.DataJson
	}
	return ""
}

type ScoreArray struct {
	Score            []*ScoreData `protobuf:"bytes,1,rep,name=score" json:"score,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *ScoreArray) Reset()                    { *m = ScoreArray{} }
func (m *ScoreArray) String() string            { return proto.CompactTextString(m) }
func (*ScoreArray) ProtoMessage()               {}
func (*ScoreArray) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *ScoreArray) GetScore() []*ScoreData {
	if m != nil {
		return m.Score
	}
	return nil
}

// Represents a configuration of a perplexity score
type PerplexityScoreConfig struct {
	ModelType        *PerplexityScoreConfig_Type `protobuf:"varint,3,opt,name=model_type,json=modelType,enum=artm.PerplexityScoreConfig_Type,def=0" json:"model_type,omitempty"`
	DictionaryName   *string                     `protobuf:"bytes,4,opt,name=dictionary_name,json=dictionaryName" json:"dictionary_name,omitempty"`
	ClassId          []string                    `protobuf:"bytes,7,rep,name=class_id,json=classId" json:"class_id,omitempty"`
	XXX_unrecognized []byte                      `json:"-"`
}

func (m *PerplexityScoreConfig) Reset()                    { *m = PerplexityScoreConfig{} }
func (m *PerplexityScoreConfig) String() string            { return proto.CompactTextString(m) }
func (*PerplexityScoreConfig) ProtoMessage()               {}
func (*PerplexityScoreConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

const Default_PerplexityScoreConfig_ModelType PerplexityScoreConfig_Type = PerplexityScoreConfig_UnigramDocumentModel

func (m *PerplexityScoreConfig) GetModelType() PerplexityScoreConfig_Type {
	if m != nil && m.ModelType != nil {
		return *m.ModelType
	}
	return Default_PerplexityScoreConfig_ModelType
}

func (m *PerplexityScoreConfig) GetDictionaryName() string {
	if m != nil && m.DictionaryName != nil {
		return *m.DictionaryName
	}
	return ""
}

func (m *PerplexityScoreConfig) GetClassId() []string {
	if m != nil {
		return m.ClassId
	}
	return nil
}

// Represents a result of calculation of a perplexity score
type PerplexityScore struct {
	Value            *float64 `protobuf:"fixed64,1,opt,name=value" json:"value,omitempty"`
	Raw              *float64 `protobuf:"fixed64,2,opt,name=raw" json:"raw,omitempty"`
	Normalizer       *float64 `protobuf:"fixed64,3,opt,name=normalizer" json:"normalizer,omitempty"`
	ZeroWords        *int64   `protobuf:"varint,4,opt,name=zero_words,json=zeroWords" json:"zero_words,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *PerplexityScore) Reset()                    { *m = PerplexityScore{} }
func (m *PerplexityScore) String() string            { return proto.CompactTextString(m) }
func (*PerplexityScore) ProtoMessage()               {}
func (*PerplexityScore) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *PerplexityScore) GetValue() float64 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

func (m *PerplexityScore) GetRaw() float64 {
	if m != nil && m.Raw != nil {
		return *m.Raw
	}
	return 0
}

func (m *PerplexityScore) GetNormalizer() float64 {
	if m != nil && m.Normalizer != nil {
		return *m.Normalizer
	}
	return 0
}

func (m *PerplexityScore) GetZeroWords() int64 {
	if m != nil && m.ZeroWords != nil {
		return *m.ZeroWords
	}
	return 0
}

// Represents a configuration of a theta sparsity score
type SparsityThetaScoreConfig struct {
	Eps              *float32 `protobuf:"fixed32,3,opt,name=eps,def=1e-37" json:"eps,omitempty"`
	TopicName        []string `protobuf:"bytes,4,rep,name=topic_name,json=topicName" json:"topic_name,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *SparsityThetaScoreConfig) Reset()                    { *m = SparsityThetaScoreConfig{} }
func (m *SparsityThetaScoreConfig) String() string            { return proto.CompactTextString(m) }
func (*SparsityThetaScoreConfig) ProtoMessage()               {}
func (*SparsityThetaScoreConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

const Default_SparsityThetaScoreConfig_Eps float32 = 1e-37

func (m *SparsityThetaScoreConfig) GetEps() float32 {
	if m != nil && m.Eps != nil {
		return *m.Eps
	}
	return Default_SparsityThetaScoreConfig_Eps
}

func (m *SparsityThetaScoreConfig) GetTopicName() []string {
	if m != nil {
		return m.TopicName
	}
	return nil
}

// Represents a result of calculation of a theta sparsity score
type SparsityThetaScore struct {
	Value            *float64 `protobuf:"fixed64,1,opt,name=value" json:"value,omitempty"`
	ZeroTopics       *int64   `protobuf:"varint,2,opt,name=zero_topics,json=zeroTopics" json:"zero_topics,omitempty"`
	TotalTopics      *int64   `protobuf:"varint,3,opt,name=total_topics,json=totalTopics" json:"total_topics,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *SparsityThetaScore) Reset()                    { *m = SparsityThetaScore{} }
func (m *SparsityThetaScore) String() string            { return proto.CompactTextString(m) }
func (*SparsityThetaScore) ProtoMessage()               {}
func (*SparsityThetaScore) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *SparsityThetaScore) GetValue() float64 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

func (m *SparsityThetaScore) GetZeroTopics() int64 {
	if m != nil && m.ZeroTopics != nil {
		return *m.ZeroTopics
	}
	return 0
}

func (m *SparsityThetaScore) GetTotalTopics() int64 {
	if m != nil && m.TotalTopics != nil {
		return *m.TotalTopics
	}
	return 0
}

// Represents a configuration of a sparsity phi score
type SparsityPhiScoreConfig struct {
	Eps              *float32 `protobuf:"fixed32,1,opt,name=eps,def=1e-37" json:"eps,omitempty"`
	ClassId          *string  `protobuf:"bytes,2,opt,name=class_id,json=classId,def=@default_class" json:"class_id,omitempty"`
	TopicName        []string `protobuf:"bytes,3,rep,name=topic_name,json=topicName" json:"topic_name,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *SparsityPhiScoreConfig) Reset()                    { *m = SparsityPhiScoreConfig{} }
func (m *SparsityPhiScoreConfig) String() string            { return proto.CompactTextString(m) }
func (*SparsityPhiScoreConfig) ProtoMessage()               {}
func (*SparsityPhiScoreConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

const Default_SparsityPhiScoreConfig_Eps float32 = 1e-37
const Default_SparsityPhiScoreConfig_ClassId string = "@default_class"

func (m *SparsityPhiScoreConfig) GetEps() float32 {
	if m != nil && m.Eps != nil {
		return *m.Eps
	}
	return Default_SparsityPhiScoreConfig_Eps
}

func (m *SparsityPhiScoreConfig) GetClassId() string {
	if m != nil && m.ClassId != nil {
		return *m.ClassId
	}
	return Default_SparsityPhiScoreConfig_ClassId
}

func (m *SparsityPhiScoreConfig) GetTopicName() []string {
	if m != nil {
		return m.TopicName
	}
	return nil
}

// Represents a result of calculation of a phi sparsity score
type SparsityPhiScore struct {
	Value            *float64 `protobuf:"fixed64,1,opt,name=value" json:"value,omitempty"`
	ZeroTokens       *int64   `protobuf:"varint,2,opt,name=zero_tokens,json=zeroTokens" json:"zero_tokens,omitempty"`
	TotalTokens      *int64   `protobuf:"varint,3,opt,name=total_tokens,json=totalTokens" json:"total_tokens,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *SparsityPhiScore) Reset()                    { *m = SparsityPhiScore{} }
func (m *SparsityPhiScore) String() string            { return proto.CompactTextString(m) }
func (*SparsityPhiScore) ProtoMessage()               {}
func (*SparsityPhiScore) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *SparsityPhiScore) GetValue() float64 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

func (m *SparsityPhiScore) GetZeroTokens() int64 {
	if m != nil && m.ZeroTokens != nil {
		return *m.ZeroTokens
	}
	return 0
}

func (m *SparsityPhiScore) GetTotalTokens() int64 {
	if m != nil && m.TotalTokens != nil {
		return *m.TotalTokens
	}
	return 0
}

// Represents a configuration of an items processed score
type ItemsProcessedScoreConfig struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *ItemsProcessedScoreConfig) Reset()                    { *m = ItemsProcessedScoreConfig{} }
func (m *ItemsProcessedScoreConfig) String() string            { return proto.CompactTextString(m) }
func (*ItemsProcessedScoreConfig) ProtoMessage()               {}
func (*ItemsProcessedScoreConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

// Represents a result of calculation of an items processed score
type ItemsProcessedScore struct {
	Value               *int32   `protobuf:"varint,1,opt,name=value,def=0" json:"value,omitempty"`
	NumBatches          *int32   `protobuf:"varint,2,opt,name=num_batches,json=numBatches,def=0" json:"num_batches,omitempty"`
	TokenWeight         *float64 `protobuf:"fixed64,3,opt,name=token_weight,json=tokenWeight,def=0" json:"token_weight,omitempty"`
	TokenWeightInEffect *float64 `protobuf:"fixed64,4,opt,name=token_weight_in_effect,json=tokenWeightInEffect,def=0" json:"token_weight_in_effect,omitempty"`
	XXX_unrecognized    []byte   `json:"-"`
}

func (m *ItemsProcessedScore) Reset()                    { *m = ItemsProcessedScore{} }
func (m *ItemsProcessedScore) String() string            { return proto.CompactTextString(m) }
func (*ItemsProcessedScore) ProtoMessage()               {}
func (*ItemsProcessedScore) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

const Default_ItemsProcessedScore_Value int32 = 0
const Default_ItemsProcessedScore_NumBatches int32 = 0
const Default_ItemsProcessedScore_TokenWeight float64 = 0
const Default_ItemsProcessedScore_TokenWeightInEffect float64 = 0

func (m *ItemsProcessedScore) GetValue() int32 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return Default_ItemsProcessedScore_Value
}

func (m *ItemsProcessedScore) GetNumBatches() int32 {
	if m != nil && m.NumBatches != nil {
		return *m.NumBatches
	}
	return Default_ItemsProcessedScore_NumBatches
}

func (m *ItemsProcessedScore) GetTokenWeight() float64 {
	if m != nil && m.TokenWeight != nil {
		return *m.TokenWeight
	}
	return Default_ItemsProcessedScore_TokenWeight
}

func (m *ItemsProcessedScore) GetTokenWeightInEffect() float64 {
	if m != nil && m.TokenWeightInEffect != nil {
		return *m.TokenWeightInEffect
	}
	return Default_ItemsProcessedScore_TokenWeightInEffect
}

// Represents a configuration of a top tokens score
type TopTokensScoreConfig struct {
	NumTokens                  *int32   `protobuf:"varint,1,opt,name=num_tokens,json=numTokens,def=10" json:"num_tokens,omitempty"`
	ClassId                    *string  `protobuf:"bytes,2,opt,name=class_id,json=classId,def=@default_class" json:"class_id,omitempty"`
	TopicName                  []string `protobuf:"bytes,3,rep,name=topic_name,json=topicName" json:"topic_name,omitempty"`
	CooccurrenceDictionaryName *string  `protobuf:"bytes,4,opt,name=cooccurrence_dictionary_name,json=cooccurrenceDictionaryName" json:"cooccurrence_dictionary_name,omitempty"`
	Eps                        *float32 `protobuf:"fixed32,5,opt,name=eps,def=1e-37" json:"eps,omitempty"`
	XXX_unrecognized           []byte   `json:"-"`
}

func (m *TopTokensScoreConfig) Reset()                    { *m = TopTokensScoreConfig{} }
func (m *TopTokensScoreConfig) String() string            { return proto.CompactTextString(m) }
func (*TopTokensScoreConfig) ProtoMessage()               {}
func (*TopTokensScoreConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

const Default_TopTokensScoreConfig_NumTokens int32 = 10
const Default_TopTokensScoreConfig_ClassId string = "@default_class"
const Default_TopTokensScoreConfig_Eps float32 = 1e-37

func (m *TopTokensScoreConfig) GetNumTokens() int32 {
	if m != nil && m.NumTokens != nil {
		return *m.NumTokens
	}
	return Default_TopTokensScoreConfig_NumTokens
}

func (m *TopTokensScoreConfig) GetClassId() string {
	if m != nil && m.ClassId != nil {
		return *m.ClassId
	}
	return Default_TopTokensScoreConfig_ClassId
}

func (m *TopTokensScoreConfig) GetTopicName() []string {
	if m != nil {
		return m.TopicName
	}
	return nil
}

func (m *TopTokensScoreConfig) GetCooccurrenceDictionaryName() string {
	if m != nil && m.CooccurrenceDictionaryName != nil {
		return *m.CooccurrenceDictionaryName
	}
	return ""
}

func (m *TopTokensScoreConfig) GetEps() float32 {
	if m != nil && m.Eps != nil {
		return *m.Eps
	}
	return Default_TopTokensScoreConfig_Eps
}

// Represents a result of calculation of a top tokens score
type TopTokensScore struct {
	NumEntries       *int32    `protobuf:"varint,1,opt,name=num_entries,json=numEntries" json:"num_entries,omitempty"`
	TopicName        []string  `protobuf:"bytes,2,rep,name=topic_name,json=topicName" json:"topic_name,omitempty"`
	TopicIndex       []int32   `protobuf:"varint,3,rep,name=topic_index,json=topicIndex" json:"topic_index,omitempty"`
	Token            []string  `protobuf:"bytes,4,rep,name=token" json:"token,omitempty"`
	Weight           []float32 `protobuf:"fixed32,5,rep,name=weight" json:"weight,omitempty"`
	Coherence        []float32 `protobuf:"fixed32,6,rep,name=coherence" json:"coherence,omitempty"`
	AverageCoherence *float32  `protobuf:"fixed32,7,opt,name=average_coherence,json=averageCoherence" json:"average_coherence,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *TopTokensScore) Reset()                    { *m = TopTokensScore{} }
func (m *TopTokensScore) String() string            { return proto.CompactTextString(m) }
func (*TopTokensScore) ProtoMessage()               {}
func (*TopTokensScore) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *TopTokensScore) GetNumEntries() int32 {
	if m != nil && m.NumEntries != nil {
		return *m.NumEntries
	}
	return 0
}

func (m *TopTokensScore) GetTopicName() []string {
	if m != nil {
		return m.TopicName
	}
	return nil
}

func (m *TopTokensScore) GetTopicIndex() []int32 {
	if m != nil {
		return m.TopicIndex
	}
	return nil
}

func (m *TopTokensScore) GetToken() []string {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *TopTokensScore) GetWeight() []float32 {
	if m != nil {
		return m.Weight
	}
	return nil
}

func (m *TopTokensScore) GetCoherence() []float32 {
	if m != nil {
		return m.Coherence
	}
	return nil
}

func (m *TopTokensScore) GetAverageCoherence() float32 {
	if m != nil && m.AverageCoherence != nil {
		return *m.AverageCoherence
	}
	return 0
}

// Represents a configuration of a theta snippet score
type ThetaSnippetScoreConfig struct {
	NumItems         *int32 `protobuf:"varint,4,opt,name=num_items,json=numItems,def=10" json:"num_items,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ThetaSnippetScoreConfig) Reset()                    { *m = ThetaSnippetScoreConfig{} }
func (m *ThetaSnippetScoreConfig) String() string            { return proto.CompactTextString(m) }
func (*ThetaSnippetScoreConfig) ProtoMessage()               {}
func (*ThetaSnippetScoreConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

const Default_ThetaSnippetScoreConfig_NumItems int32 = 10

func (m *ThetaSnippetScoreConfig) GetNumItems() int32 {
	if m != nil && m.NumItems != nil {
		return *m.NumItems
	}
	return Default_ThetaSnippetScoreConfig_NumItems
}

// Represents a result of calculation of a theta snippet score
type ThetaSnippetScore struct {
	ItemId           []int32       `protobuf:"varint,1,rep,name=item_id,json=itemId" json:"item_id,omitempty"`
	Values           []*FloatArray `protobuf:"bytes,2,rep,name=values" json:"values,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *ThetaSnippetScore) Reset()                    { *m = ThetaSnippetScore{} }
func (m *ThetaSnippetScore) String() string            { return proto.CompactTextString(m) }
func (*ThetaSnippetScore) ProtoMessage()               {}
func (*ThetaSnippetScore) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *ThetaSnippetScore) GetItemId() []int32 {
	if m != nil {
		return m.ItemId
	}
	return nil
}

func (m *ThetaSnippetScore) GetValues() []*FloatArray {
	if m != nil {
		return m.Values
	}
	return nil
}

// Represents a configuration of a topic kernel score
type TopicKernelScoreConfig struct {
	Eps                        *float32 `protobuf:"fixed32,1,opt,name=eps,def=1e-37" json:"eps,omitempty"`
	ClassId                    *string  `protobuf:"bytes,2,opt,name=class_id,json=classId,def=@default_class" json:"class_id,omitempty"`
	TopicName                  []string `protobuf:"bytes,3,rep,name=topic_name,json=topicName" json:"topic_name,omitempty"`
	ProbabilityMassThreshold   *float64 `protobuf:"fixed64,4,opt,name=probability_mass_threshold,json=probabilityMassThreshold,def=0.1" json:"probability_mass_threshold,omitempty"`
	CooccurrenceDictionaryName *string  `protobuf:"bytes,5,opt,name=cooccurrence_dictionary_name,json=cooccurrenceDictionaryName" json:"cooccurrence_dictionary_name,omitempty"`
	XXX_unrecognized           []byte   `json:"-"`
}

func (m *TopicKernelScoreConfig) Reset()                    { *m = TopicKernelScoreConfig{} }
func (m *TopicKernelScoreConfig) String() string            { return proto.CompactTextString(m) }
func (*TopicKernelScoreConfig) ProtoMessage()               {}
func (*TopicKernelScoreConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

const Default_TopicKernelScoreConfig_Eps float32 = 1e-37
const Default_TopicKernelScoreConfig_ClassId string = "@default_class"
const Default_TopicKernelScoreConfig_ProbabilityMassThreshold float64 = 0.1

func (m *TopicKernelScoreConfig) GetEps() float32 {
	if m != nil && m.Eps != nil {
		return *m.Eps
	}
	return Default_TopicKernelScoreConfig_Eps
}

func (m *TopicKernelScoreConfig) GetClassId() string {
	if m != nil && m.ClassId != nil {
		return *m.ClassId
	}
	return Default_TopicKernelScoreConfig_ClassId
}

func (m *TopicKernelScoreConfig) GetTopicName() []string {
	if m != nil {
		return m.TopicName
	}
	return nil
}

func (m *TopicKernelScoreConfig) GetProbabilityMassThreshold() float64 {
	if m != nil && m.ProbabilityMassThreshold != nil {
		return *m.ProbabilityMassThreshold
	}
	return Default_TopicKernelScoreConfig_ProbabilityMassThreshold
}

func (m *TopicKernelScoreConfig) GetCooccurrenceDictionaryName() string {
	if m != nil && m.CooccurrenceDictionaryName != nil {
		return *m.CooccurrenceDictionaryName
	}
	return ""
}

// Represents a result of calculation of a topic kernel score
type TopicKernelScore struct {
	KernelSize            []float64      `protobuf:"fixed64,1,rep,name=kernel_size,json=kernelSize" json:"kernel_size,omitempty"`
	KernelPurity          []float64      `protobuf:"fixed64,2,rep,name=kernel_purity,json=kernelPurity" json:"kernel_purity,omitempty"`
	KernelContrast        []float64      `protobuf:"fixed64,3,rep,name=kernel_contrast,json=kernelContrast" json:"kernel_contrast,omitempty"`
	AverageKernelSize     *float64       `protobuf:"fixed64,4,opt,name=average_kernel_size,json=averageKernelSize" json:"average_kernel_size,omitempty"`
	AverageKernelPurity   *float64       `protobuf:"fixed64,5,opt,name=average_kernel_purity,json=averageKernelPurity" json:"average_kernel_purity,omitempty"`
	AverageKernelContrast *float64       `protobuf:"fixed64,6,opt,name=average_kernel_contrast,json=averageKernelContrast" json:"average_kernel_contrast,omitempty"`
	Coherence             []float64      `protobuf:"fixed64,7,rep,name=coherence" json:"coherence,omitempty"`
	AverageCoherence      *float32       `protobuf:"fixed32,8,opt,name=average_coherence,json=averageCoherence" json:"average_coherence,omitempty"`
	KernelTokens          []*StringArray `protobuf:"bytes,9,rep,name=kernel_tokens,json=kernelTokens" json:"kernel_tokens,omitempty"`
	TopicName             []string       `protobuf:"bytes,10,rep,name=topic_name,json=topicName" json:"topic_name,omitempty"`
	XXX_unrecognized      []byte         `json:"-"`
}

func (m *TopicKernelScore) Reset()                    { *m = TopicKernelScore{} }
func (m *TopicKernelScore) String() string            { return proto.CompactTextString(m) }
func (*TopicKernelScore) ProtoMessage()               {}
func (*TopicKernelScore) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *TopicKernelScore) GetKernelSize() []float64 {
	if m != nil {
		return m.KernelSize
	}
	return nil
}

func (m *TopicKernelScore) GetKernelPurity() []float64 {
	if m != nil {
		return m.KernelPurity
	}
	return nil
}

func (m *TopicKernelScore) GetKernelContrast() []float64 {
	if m != nil {
		return m.KernelContrast
	}
	return nil
}

func (m *TopicKernelScore) GetAverageKernelSize() float64 {
	if m != nil && m.AverageKernelSize != nil {
		return *m.AverageKernelSize
	}
	return 0
}

func (m *TopicKernelScore) GetAverageKernelPurity() float64 {
	if m != nil && m.AverageKernelPurity != nil {
		return *m.AverageKernelPurity
	}
	return 0
}

func (m *TopicKernelScore) GetAverageKernelContrast() float64 {
	if m != nil && m.AverageKernelContrast != nil {
		return *m.AverageKernelContrast
	}
	return 0
}

func (m *TopicKernelScore) GetCoherence() []float64 {
	if m != nil {
		return m.Coherence
	}
	return nil
}

func (m *TopicKernelScore) GetAverageCoherence() float32 {
	if m != nil && m.AverageCoherence != nil {
		return *m.AverageCoherence
	}
	return 0
}

func (m *TopicKernelScore) GetKernelTokens() []*StringArray {
	if m != nil {
		return m.KernelTokens
	}
	return nil
}

func (m *TopicKernelScore) GetTopicName() []string {
	if m != nil {
		return m.TopicName
	}
	return nil
}

// Represents a configuration of a topic part in nwt score
type TopicMassPhiScoreConfig struct {
	Eps              *float32 `protobuf:"fixed32,1,opt,name=eps,def=1e-37" json:"eps,omitempty"`
	ClassId          *string  `protobuf:"bytes,2,opt,name=class_id,json=classId,def=@default_class" json:"class_id,omitempty"`
	TopicName        []string `protobuf:"bytes,3,rep,name=topic_name,json=topicName" json:"topic_name,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *TopicMassPhiScoreConfig) Reset()                    { *m = TopicMassPhiScoreConfig{} }
func (m *TopicMassPhiScoreConfig) String() string            { return proto.CompactTextString(m) }
func (*TopicMassPhiScoreConfig) ProtoMessage()               {}
func (*TopicMassPhiScoreConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

const Default_TopicMassPhiScoreConfig_Eps float32 = 1e-37
const Default_TopicMassPhiScoreConfig_ClassId string = "@default_class"

func (m *TopicMassPhiScoreConfig) GetEps() float32 {
	if m != nil && m.Eps != nil {
		return *m.Eps
	}
	return Default_TopicMassPhiScoreConfig_Eps
}

func (m *TopicMassPhiScoreConfig) GetClassId() string {
	if m != nil && m.ClassId != nil {
		return *m.ClassId
	}
	return Default_TopicMassPhiScoreConfig_ClassId
}

func (m *TopicMassPhiScoreConfig) GetTopicName() []string {
	if m != nil {
		return m.TopicName
	}
	return nil
}

// Represents a result of calculation of a topic part in nwt score
type TopicMassPhiScore struct {
	Value            *float64  `protobuf:"fixed64,1,opt,name=value" json:"value,omitempty"`
	TopicName        []string  `protobuf:"bytes,2,rep,name=topic_name,json=topicName" json:"topic_name,omitempty"`
	TopicRatio       []float64 `protobuf:"fixed64,3,rep,name=topic_ratio,json=topicRatio" json:"topic_ratio,omitempty"`
	TopicMass        []float64 `protobuf:"fixed64,4,rep,name=topic_mass,json=topicMass" json:"topic_mass,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *TopicMassPhiScore) Reset()                    { *m = TopicMassPhiScore{} }
func (m *TopicMassPhiScore) String() string            { return proto.CompactTextString(m) }
func (*TopicMassPhiScore) ProtoMessage()               {}
func (*TopicMassPhiScore) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *TopicMassPhiScore) GetValue() float64 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

func (m *TopicMassPhiScore) GetTopicName() []string {
	if m != nil {
		return m.TopicName
	}
	return nil
}

func (m *TopicMassPhiScore) GetTopicRatio() []float64 {
	if m != nil {
		return m.TopicRatio
	}
	return nil
}

func (m *TopicMassPhiScore) GetTopicMass() []float64 {
	if m != nil {
		return m.TopicMass
	}
	return nil
}

// Represents a configuration of a class precision score
type ClassPrecisionScoreConfig struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *ClassPrecisionScoreConfig) Reset()                    { *m = ClassPrecisionScoreConfig{} }
func (m *ClassPrecisionScoreConfig) String() string            { return proto.CompactTextString(m) }
func (*ClassPrecisionScoreConfig) ProtoMessage()               {}
func (*ClassPrecisionScoreConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

// Represents a result of calculation of a class precision score
type ClassPrecisionScore struct {
	Value            *float64 `protobuf:"fixed64,1,opt,name=value" json:"value,omitempty"`
	Error            *float64 `protobuf:"fixed64,2,opt,name=error" json:"error,omitempty"`
	Total            *float64 `protobuf:"fixed64,3,opt,name=total" json:"total,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *ClassPrecisionScore) Reset()                    { *m = ClassPrecisionScore{} }
func (m *ClassPrecisionScore) String() string            { return proto.CompactTextString(m) }
func (*ClassPrecisionScore) ProtoMessage()               {}
func (*ClassPrecisionScore) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *ClassPrecisionScore) GetValue() float64 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

func (m *ClassPrecisionScore) GetError() float64 {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return 0
}

func (m *ClassPrecisionScore) GetTotal() float64 {
	if m != nil && m.Total != nil {
		return *m.Total
	}
	return 0
}

// Represents a configuration of a class precision score
type PeakMemoryScoreConfig struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *PeakMemoryScoreConfig) Reset()                    { *m = PeakMemoryScoreConfig{} }
func (m *PeakMemoryScoreConfig) String() string            { return proto.CompactTextString(m) }
func (*PeakMemoryScoreConfig) ProtoMessage()               {}
func (*PeakMemoryScoreConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

// Represents a result of calculation of a class precision score
type PeakMemoryScore struct {
	Value            *int64 `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PeakMemoryScore) Reset()                    { *m = PeakMemoryScore{} }
func (m *PeakMemoryScore) String() string            { return proto.CompactTextString(m) }
func (*PeakMemoryScore) ProtoMessage()               {}
func (*PeakMemoryScore) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *PeakMemoryScore) GetValue() int64 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

// Represents a configuration of a background tokens part score
type BackgroundTokensRatioScoreConfig struct {
	DeltaThreshold   *float32 `protobuf:"fixed32,1,opt,name=delta_threshold,json=deltaThreshold,def=0.5" json:"delta_threshold,omitempty"`
	SaveTokens       *bool    `protobuf:"varint,2,opt,name=save_tokens,json=saveTokens,def=1" json:"save_tokens,omitempty"`
	DirectKl         *bool    `protobuf:"varint,3,opt,name=direct_kl,json=directKl,def=1" json:"direct_kl,omitempty"`
	ClassId          *string  `protobuf:"bytes,4,opt,name=class_id,json=classId,def=@default_class" json:"class_id,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *BackgroundTokensRatioScoreConfig) Reset()         { *m = BackgroundTokensRatioScoreConfig{} }
func (m *BackgroundTokensRatioScoreConfig) String() string { return proto.CompactTextString(m) }
func (*BackgroundTokensRatioScoreConfig) ProtoMessage()    {}
func (*BackgroundTokensRatioScoreConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{46}
}

const Default_BackgroundTokensRatioScoreConfig_DeltaThreshold float32 = 0.5
const Default_BackgroundTokensRatioScoreConfig_SaveTokens bool = true
const Default_BackgroundTokensRatioScoreConfig_DirectKl bool = true
const Default_BackgroundTokensRatioScoreConfig_ClassId string = "@default_class"

func (m *BackgroundTokensRatioScoreConfig) GetDeltaThreshold() float32 {
	if m != nil && m.DeltaThreshold != nil {
		return *m.DeltaThreshold
	}
	return Default_BackgroundTokensRatioScoreConfig_DeltaThreshold
}

func (m *BackgroundTokensRatioScoreConfig) GetSaveTokens() bool {
	if m != nil && m.SaveTokens != nil {
		return *m.SaveTokens
	}
	return Default_BackgroundTokensRatioScoreConfig_SaveTokens
}

func (m *BackgroundTokensRatioScoreConfig) GetDirectKl() bool {
	if m != nil && m.DirectKl != nil {
		return *m.DirectKl
	}
	return Default_BackgroundTokensRatioScoreConfig_DirectKl
}

func (m *BackgroundTokensRatioScoreConfig) GetClassId() string {
	if m != nil && m.ClassId != nil {
		return *m.ClassId
	}
	return Default_BackgroundTokensRatioScoreConfig_ClassId
}

// Represents a result of calculation of a background tokens part score
type BackgroundTokensRatioScore struct {
	Value            *float32 `protobuf:"fixed32,1,opt,name=value" json:"value,omitempty"`
	Token            []string `protobuf:"bytes,2,rep,name=token" json:"token,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *BackgroundTokensRatioScore) Reset()                    { *m = BackgroundTokensRatioScore{} }
func (m *BackgroundTokensRatioScore) String() string            { return proto.CompactTextString(m) }
func (*BackgroundTokensRatioScore) ProtoMessage()               {}
func (*BackgroundTokensRatioScore) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *BackgroundTokensRatioScore) GetValue() float32 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

func (m *BackgroundTokensRatioScore) GetToken() []string {
	if m != nil {
		return m.Token
	}
	return nil
}

// Represents a topic model (or an operation on topic model)
type TopicModel struct {
	Name             *string       `protobuf:"bytes,1,opt,name=name,def=@model" json:"name,omitempty"`
	NumTopics        *int32        `protobuf:"varint,2,opt,name=num_topics,json=numTopics" json:"num_topics,omitempty"`
	TopicName        []string      `protobuf:"bytes,3,rep,name=topic_name,json=topicName" json:"topic_name,omitempty"`
	Token            []string      `protobuf:"bytes,4,rep,name=token" json:"token,omitempty"`
	TokenWeights     []*FloatArray `protobuf:"bytes,5,rep,name=token_weights,json=tokenWeights" json:"token_weights,omitempty"`
	ClassId          []string      `protobuf:"bytes,6,rep,name=class_id,json=classId" json:"class_id,omitempty"`
	TopicIndices     []*IntArray   `protobuf:"bytes,8,rep,name=topic_indices,json=topicIndices" json:"topic_indices,omitempty"`
	NumValues        *int64        `protobuf:"varint,9,opt,name=num_values,json=numValues" json:"num_values,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *TopicModel) Reset()                    { *m = TopicModel{} }
func (m *TopicModel) String() string            { return proto.CompactTextString(m) }
func (*TopicModel) ProtoMessage()               {}
func (*TopicModel) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

const Default_TopicModel_Name string = "@model"

func (m *TopicModel) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return Default_TopicModel_Name
}

func (m *TopicModel) GetNumTopics() int32 {
	if m != nil && m.NumTopics != nil {
		return *m.NumTopics
	}
	return 0
}

func (m *TopicModel) GetTopicName() []string {
	if m != nil {
		return m.TopicName
	}
	return nil
}

func (m *TopicModel) GetToken() []string {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *TopicModel) GetTokenWeights() []*FloatArray {
	if m != nil {
		return m.TokenWeights
	}
	return nil
}

func (m *TopicModel) GetClassId() []string {
	if m != nil {
		return m.ClassId
	}
	return nil
}

func (m *TopicModel) GetTopicIndices() []*IntArray {
	if m != nil {
		return m.TopicIndices
	}
	return nil
}

func (m *TopicModel) GetNumValues() int64 {
	if m != nil && m.NumValues != nil {
		return *m.NumValues
	}
	return 0
}

// Represents a theta matrix.
type ThetaMatrix struct {
	ItemId           []int32       `protobuf:"varint,2,rep,name=item_id,json=itemId" json:"item_id,omitempty"`
	ItemWeights      []*FloatArray `protobuf:"bytes,3,rep,name=item_weights,json=itemWeights" json:"item_weights,omitempty"`
	TopicName        []string      `protobuf:"bytes,4,rep,name=topic_name,json=topicName" json:"topic_name,omitempty"`
	NumTopics        *int32        `protobuf:"varint,5,opt,name=num_topics,json=numTopics" json:"num_topics,omitempty"`
	ItemTitle        []string      `protobuf:"bytes,6,rep,name=item_title,json=itemTitle" json:"item_title,omitempty"`
	TopicIndices     []*IntArray   `protobuf:"bytes,7,rep,name=topic_indices,json=topicIndices" json:"topic_indices,omitempty"`
	NumValues        *int64        `protobuf:"varint,8,opt,name=num_values,json=numValues" json:"num_values,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *ThetaMatrix) Reset()                    { *m = ThetaMatrix{} }
func (m *ThetaMatrix) String() string            { return proto.CompactTextString(m) }
func (*ThetaMatrix) ProtoMessage()               {}
func (*ThetaMatrix) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

func (m *ThetaMatrix) GetItemId() []int32 {
	if m != nil {
		return m.ItemId
	}
	return nil
}

func (m *ThetaMatrix) GetItemWeights() []*FloatArray {
	if m != nil {
		return m.ItemWeights
	}
	return nil
}

func (m *ThetaMatrix) GetTopicName() []string {
	if m != nil {
		return m.TopicName
	}
	return nil
}

func (m *ThetaMatrix) GetNumTopics() int32 {
	if m != nil && m.NumTopics != nil {
		return *m.NumTopics
	}
	return 0
}

func (m *ThetaMatrix) GetItemTitle() []string {
	if m != nil {
		return m.ItemTitle
	}
	return nil
}

func (m *ThetaMatrix) GetTopicIndices() []*IntArray {
	if m != nil {
		return m.TopicIndices
	}
	return nil
}

func (m *ThetaMatrix) GetNumValues() int64 {
	if m != nil && m.NumValues != nil {
		return *m.NumValues
	}
	return 0
}

// Represents a configuration of a collection parser.
type CollectionParserConfig struct {
	Format               *CollectionParserConfig_CollectionFormat `protobuf:"varint,1,opt,name=format,enum=artm.CollectionParserConfig_CollectionFormat,def=0" json:"format,omitempty"`
	DocwordFilePath      *string                                  `protobuf:"bytes,2,opt,name=docword_file_path,json=docwordFilePath" json:"docword_file_path,omitempty"`
	VocabFilePath        *string                                  `protobuf:"bytes,3,opt,name=vocab_file_path,json=vocabFilePath" json:"vocab_file_path,omitempty"`
	TargetFolder         *string                                  `protobuf:"bytes,4,opt,name=target_folder,json=targetFolder" json:"target_folder,omitempty"`
	NumItemsPerBatch     *int32                                   `protobuf:"varint,5,opt,name=num_items_per_batch,json=numItemsPerBatch,def=1000" json:"num_items_per_batch,omitempty"`
	UseUnityBasedIndices *bool                                    `protobuf:"varint,6,opt,name=use_unity_based_indices,json=useUnityBasedIndices,def=1" json:"use_unity_based_indices,omitempty"`
	NameType             *CollectionParserConfig_BatchNameType    `protobuf:"varint,7,opt,name=name_type,json=nameType,enum=artm.CollectionParserConfig_BatchNameType,def=0" json:"name_type,omitempty"`
	NumThreads           *int32                                   `protobuf:"varint,8,opt,name=num_threads,json=numThreads" json:"num_threads,omitempty"`
	ClassId              []string                                 `protobuf:"bytes,9,rep,name=class_id,json=classId" json:"class_id,omitempty"`
	XXX_unrecognized     []byte                                   `json:"-"`
}

func (m *CollectionParserConfig) Reset()                    { *m = CollectionParserConfig{} }
func (m *CollectionParserConfig) String() string            { return proto.CompactTextString(m) }
func (*CollectionParserConfig) ProtoMessage()               {}
func (*CollectionParserConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

const Default_CollectionParserConfig_Format CollectionParserConfig_CollectionFormat = CollectionParserConfig_BagOfWordsUci
const Default_CollectionParserConfig_NumItemsPerBatch int32 = 1000
const Default_CollectionParserConfig_UseUnityBasedIndices bool = true
const Default_CollectionParserConfig_NameType CollectionParserConfig_BatchNameType = CollectionParserConfig_Guid

func (m *CollectionParserConfig) GetFormat() CollectionParserConfig_CollectionFormat {
	if m != nil && m.Format != nil {
		return *m.Format
	}
	return Default_CollectionParserConfig_Format
}

func (m *CollectionParserConfig) GetDocwordFilePath() string {
	if m != nil && m.DocwordFilePath != nil {
		return *m.DocwordFilePath
	}
	return ""
}

func (m *CollectionParserConfig) GetVocabFilePath() string {
	if m != nil && m.VocabFilePath != nil {
		return *m.VocabFilePath
	}
	return ""
}

func (m *CollectionParserConfig) GetTargetFolder() string {
	if m != nil && m.TargetFolder != nil {
		return *m.TargetFolder
	}
	return ""
}

func (m *CollectionParserConfig) GetNumItemsPerBatch() int32 {
	if m != nil && m.NumItemsPerBatch != nil {
		return *m.NumItemsPerBatch
	}
	return Default_CollectionParserConfig_NumItemsPerBatch
}

func (m *CollectionParserConfig) GetUseUnityBasedIndices() bool {
	if m != nil && m.UseUnityBasedIndices != nil {
		return *m.UseUnityBasedIndices
	}
	return Default_CollectionParserConfig_UseUnityBasedIndices
}

func (m *CollectionParserConfig) GetNameType() CollectionParserConfig_BatchNameType {
	if m != nil && m.NameType != nil {
		return *m.NameType
	}
	return Default_CollectionParserConfig_NameType
}

func (m *CollectionParserConfig) GetNumThreads() int32 {
	if m != nil && m.NumThreads != nil {
		return *m.NumThreads
	}
	return 0
}

func (m *CollectionParserConfig) GetClassId() []string {
	if m != nil {
		return m.ClassId
	}
	return nil
}

// Misc statistics produced by collection parser
type CollectionParserInfo struct {
	NumItems         *int64   `protobuf:"varint,1,opt,name=num_items,json=numItems" json:"num_items,omitempty"`
	NumBatches       *int64   `protobuf:"varint,2,opt,name=num_batches,json=numBatches" json:"num_batches,omitempty"`
	DictionarySize   *int64   `protobuf:"varint,3,opt,name=dictionary_size,json=dictionarySize" json:"dictionary_size,omitempty"`
	NumTokens        *int64   `protobuf:"varint,4,opt,name=num_tokens,json=numTokens" json:"num_tokens,omitempty"`
	TotalTokenWeight *float32 `protobuf:"fixed32,5,opt,name=total_token_weight,json=totalTokenWeight" json:"total_token_weight,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CollectionParserInfo) Reset()                    { *m = CollectionParserInfo{} }
func (m *CollectionParserInfo) String() string            { return proto.CompactTextString(m) }
func (*CollectionParserInfo) ProtoMessage()               {}
func (*CollectionParserInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{51} }

func (m *CollectionParserInfo) GetNumItems() int64 {
	if m != nil && m.NumItems != nil {
		return *m.NumItems
	}
	return 0
}

func (m *CollectionParserInfo) GetNumBatches() int64 {
	if m != nil && m.NumBatches != nil {
		return *m.NumBatches
	}
	return 0
}

func (m *CollectionParserInfo) GetDictionarySize() int64 {
	if m != nil && m.DictionarySize != nil {
		return *m.DictionarySize
	}
	return 0
}

func (m *CollectionParserInfo) GetNumTokens() int64 {
	if m != nil && m.NumTokens != nil {
		return *m.NumTokens
	}
	return 0
}

func (m *CollectionParserInfo) GetTotalTokenWeight() float32 {
	if m != nil && m.TotalTokenWeight != nil {
		return *m.TotalTokenWeight
	}
	return 0
}

// Represents an argument of 'initialize model' operation
type InitializeModelArgs struct {
	ModelName        *string  `protobuf:"bytes,1,opt,name=model_name,json=modelName" json:"model_name,omitempty"`
	DictionaryName   *string  `protobuf:"bytes,2,opt,name=dictionary_name,json=dictionaryName" json:"dictionary_name,omitempty"`
	TopicName        []string `protobuf:"bytes,4,rep,name=topic_name,json=topicName" json:"topic_name,omitempty"`
	Seed             *int32   `protobuf:"varint,5,opt,name=seed,def=-1" json:"seed,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *InitializeModelArgs) Reset()                    { *m = InitializeModelArgs{} }
func (m *InitializeModelArgs) String() string            { return proto.CompactTextString(m) }
func (*InitializeModelArgs) ProtoMessage()               {}
func (*InitializeModelArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{52} }

const Default_InitializeModelArgs_Seed int32 = -1

func (m *InitializeModelArgs) GetModelName() string {
	if m != nil && m.ModelName != nil {
		return *m.ModelName
	}
	return ""
}

func (m *InitializeModelArgs) GetDictionaryName() string {
	if m != nil && m.DictionaryName != nil {
		return *m.DictionaryName
	}
	return ""
}

func (m *InitializeModelArgs) GetTopicName() []string {
	if m != nil {
		return m.TopicName
	}
	return nil
}

func (m *InitializeModelArgs) GetSeed() int32 {
	if m != nil && m.Seed != nil {
		return *m.Seed
	}
	return Default_InitializeModelArgs_Seed
}

// Represents a static dictionary.
type DictionaryData struct {
	Name                 *string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Token                []string  `protobuf:"bytes,2,rep,name=token" json:"token,omitempty"`
	ClassId              []string  `protobuf:"bytes,3,rep,name=class_id,json=classId" json:"class_id,omitempty"`
	TokenValue           []float32 `protobuf:"fixed32,4,rep,name=token_value,json=tokenValue" json:"token_value,omitempty"`
	TokenTf              []float32 `protobuf:"fixed32,5,rep,name=token_tf,json=tokenTf" json:"token_tf,omitempty"`
	TokenDf              []float32 `protobuf:"fixed32,6,rep,name=token_df,json=tokenDf" json:"token_df,omitempty"`
	CoocFirstIndex       []int32   `protobuf:"varint,7,rep,name=cooc_first_index,json=coocFirstIndex" json:"cooc_first_index,omitempty"`
	CoocSecondIndex      []int32   `protobuf:"varint,8,rep,name=cooc_second_index,json=coocSecondIndex" json:"cooc_second_index,omitempty"`
	CoocValue            []float32 `protobuf:"fixed32,9,rep,name=cooc_value,json=coocValue" json:"cooc_value,omitempty"`
	NumItemsInCollection *int64    `protobuf:"varint,10,opt,name=num_items_in_collection,json=numItemsInCollection" json:"num_items_in_collection,omitempty"`
	CoocTf               []float32 `protobuf:"fixed32,11,rep,name=cooc_tf,json=coocTf" json:"cooc_tf,omitempty"`
	CoocDf               []float32 `protobuf:"fixed32,12,rep,name=cooc_df,json=coocDf" json:"cooc_df,omitempty"`
	XXX_unrecognized     []byte    `json:"-"`
}

func (m *DictionaryData) Reset()                    { *m = DictionaryData{} }
func (m *DictionaryData) String() string            { return proto.CompactTextString(m) }
func (*DictionaryData) ProtoMessage()               {}
func (*DictionaryData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{53} }

func (m *DictionaryData) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *DictionaryData) GetToken() []string {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *DictionaryData) GetClassId() []string {
	if m != nil {
		return m.ClassId
	}
	return nil
}

func (m *DictionaryData) GetTokenValue() []float32 {
	if m != nil {
		return m.TokenValue
	}
	return nil
}

func (m *DictionaryData) GetTokenTf() []float32 {
	if m != nil {
		return m.TokenTf
	}
	return nil
}

func (m *DictionaryData) GetTokenDf() []float32 {
	if m != nil {
		return m.TokenDf
	}
	return nil
}

func (m *DictionaryData) GetCoocFirstIndex() []int32 {
	if m != nil {
		return m.CoocFirstIndex
	}
	return nil
}

func (m *DictionaryData) GetCoocSecondIndex() []int32 {
	if m != nil {
		return m.CoocSecondIndex
	}
	return nil
}

func (m *DictionaryData) GetCoocValue() []float32 {
	if m != nil {
		return m.CoocValue
	}
	return nil
}

func (m *DictionaryData) GetNumItemsInCollection() int64 {
	if m != nil && m.NumItemsInCollection != nil {
		return *m.NumItemsInCollection
	}
	return 0
}

func (m *DictionaryData) GetCoocTf() []float32 {
	if m != nil {
		return m.CoocTf
	}
	return nil
}

func (m *DictionaryData) GetCoocDf() []float32 {
	if m != nil {
		return m.CoocDf
	}
	return nil
}

type FilterDictionaryArgs struct {
	DictionaryName       *string  `protobuf:"bytes,1,opt,name=dictionary_name,json=dictionaryName" json:"dictionary_name,omitempty"`
	DictionaryTargetName *string  `protobuf:"bytes,2,opt,name=dictionary_target_name,json=dictionaryTargetName" json:"dictionary_target_name,omitempty"`
	ClassId              *string  `protobuf:"bytes,3,opt,name=class_id,json=classId" json:"class_id,omitempty"`
	MinDf                *float32 `protobuf:"fixed32,4,opt,name=min_df,json=minDf" json:"min_df,omitempty"`
	MaxDf                *float32 `protobuf:"fixed32,5,opt,name=max_df,json=maxDf" json:"max_df,omitempty"`
	MinDfRate            *float32 `protobuf:"fixed32,6,opt,name=min_df_rate,json=minDfRate" json:"min_df_rate,omitempty"`
	MaxDfRate            *float32 `protobuf:"fixed32,7,opt,name=max_df_rate,json=maxDfRate" json:"max_df_rate,omitempty"`
	MinTf                *float32 `protobuf:"fixed32,8,opt,name=min_tf,json=minTf" json:"min_tf,omitempty"`
	MaxTf                *float32 `protobuf:"fixed32,9,opt,name=max_tf,json=maxTf" json:"max_tf,omitempty"`
	MaxDictionarySize    *int64   `protobuf:"varint,10,opt,name=max_dictionary_size,json=maxDictionarySize" json:"max_dictionary_size,omitempty"`
	XXX_unrecognized     []byte   `json:"-"`
}

func (m *FilterDictionaryArgs) Reset()                    { *m = FilterDictionaryArgs{} }
func (m *FilterDictionaryArgs) String() string            { return proto.CompactTextString(m) }
func (*FilterDictionaryArgs) ProtoMessage()               {}
func (*FilterDictionaryArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{54} }

func (m *FilterDictionaryArgs) GetDictionaryName() string {
	if m != nil && m.DictionaryName != nil {
		return *m.DictionaryName
	}
	return ""
}

func (m *FilterDictionaryArgs) GetDictionaryTargetName() string {
	if m != nil && m.DictionaryTargetName != nil {
		return *m.DictionaryTargetName
	}
	return ""
}

func (m *FilterDictionaryArgs) GetClassId() string {
	if m != nil && m.ClassId != nil {
		return *m.ClassId
	}
	return ""
}

func (m *FilterDictionaryArgs) GetMinDf() float32 {
	if m != nil && m.MinDf != nil {
		return *m.MinDf
	}
	return 0
}

func (m *FilterDictionaryArgs) GetMaxDf() float32 {
	if m != nil && m.MaxDf != nil {
		return *m.MaxDf
	}
	return 0
}

func (m *FilterDictionaryArgs) GetMinDfRate() float32 {
	if m != nil && m.MinDfRate != nil {
		return *m.MinDfRate
	}
	return 0
}

func (m *FilterDictionaryArgs) GetMaxDfRate() float32 {
	if m != nil && m.MaxDfRate != nil {
		return *m.MaxDfRate
	}
	return 0
}

func (m *FilterDictionaryArgs) GetMinTf() float32 {
	if m != nil && m.MinTf != nil {
		return *m.MinTf
	}
	return 0
}

func (m *FilterDictionaryArgs) GetMaxTf() float32 {
	if m != nil && m.MaxTf != nil {
		return *m.MaxTf
	}
	return 0
}

func (m *FilterDictionaryArgs) GetMaxDictionarySize() int64 {
	if m != nil && m.MaxDictionarySize != nil {
		return *m.MaxDictionarySize
	}
	return 0
}

type GatherDictionaryArgs struct {
	DictionaryTargetName *string  `protobuf:"bytes,1,opt,name=dictionary_target_name,json=dictionaryTargetName" json:"dictionary_target_name,omitempty"`
	DataPath             *string  `protobuf:"bytes,2,opt,name=data_path,json=dataPath" json:"data_path,omitempty"`
	CoocFilePath         *string  `protobuf:"bytes,3,opt,name=cooc_file_path,json=coocFilePath" json:"cooc_file_path,omitempty"`
	VocabFilePath        *string  `protobuf:"bytes,4,opt,name=vocab_file_path,json=vocabFilePath" json:"vocab_file_path,omitempty"`
	SymmetricCoocValues  *bool    `protobuf:"varint,5,opt,name=symmetric_cooc_values,json=symmetricCoocValues,def=0" json:"symmetric_cooc_values,omitempty"`
	BatchPath            []string `protobuf:"bytes,6,rep,name=batch_path,json=batchPath" json:"batch_path,omitempty"`
	XXX_unrecognized     []byte   `json:"-"`
}

func (m *GatherDictionaryArgs) Reset()                    { *m = GatherDictionaryArgs{} }
func (m *GatherDictionaryArgs) String() string            { return proto.CompactTextString(m) }
func (*GatherDictionaryArgs) ProtoMessage()               {}
func (*GatherDictionaryArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{55} }

const Default_GatherDictionaryArgs_SymmetricCoocValues bool = false

func (m *GatherDictionaryArgs) GetDictionaryTargetName() string {
	if m != nil && m.DictionaryTargetName != nil {
		return *m.DictionaryTargetName
	}
	return ""
}

func (m *GatherDictionaryArgs) GetDataPath() string {
	if m != nil && m.DataPath != nil {
		return *m.DataPath
	}
	return ""
}

func (m *GatherDictionaryArgs) GetCoocFilePath() string {
	if m != nil && m.CoocFilePath != nil {
		return *m.CoocFilePath
	}
	return ""
}

func (m *GatherDictionaryArgs) GetVocabFilePath() string {
	if m != nil && m.VocabFilePath != nil {
		return *m.VocabFilePath
	}
	return ""
}

func (m *GatherDictionaryArgs) GetSymmetricCoocValues() bool {
	if m != nil && m.SymmetricCoocValues != nil {
		return *m.SymmetricCoocValues
	}
	return Default_GatherDictionaryArgs_SymmetricCoocValues
}

func (m *GatherDictionaryArgs) GetBatchPath() []string {
	if m != nil {
		return m.BatchPath
	}
	return nil
}

type GetDictionaryArgs struct {
	DictionaryName   *string `protobuf:"bytes,1,opt,name=dictionary_name,json=dictionaryName" json:"dictionary_name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GetDictionaryArgs) Reset()                    { *m = GetDictionaryArgs{} }
func (m *GetDictionaryArgs) String() string            { return proto.CompactTextString(m) }
func (*GetDictionaryArgs) ProtoMessage()               {}
func (*GetDictionaryArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{56} }

func (m *GetDictionaryArgs) GetDictionaryName() string {
	if m != nil && m.DictionaryName != nil {
		return *m.DictionaryName
	}
	return ""
}

type GetTopicModelArgs struct {
	ModelName        *string       `protobuf:"bytes,1,opt,name=model_name,json=modelName" json:"model_name,omitempty"`
	TopicName        []string      `protobuf:"bytes,2,rep,name=topic_name,json=topicName" json:"topic_name,omitempty"`
	Token            []string      `protobuf:"bytes,3,rep,name=token" json:"token,omitempty"`
	ClassId          []string      `protobuf:"bytes,4,rep,name=class_id,json=classId" json:"class_id,omitempty"`
	UseSparseFormat  *bool         `protobuf:"varint,5,opt,name=use_sparse_format,json=useSparseFormat" json:"use_sparse_format,omitempty"`
	Eps              *float32      `protobuf:"fixed32,6,opt,name=eps,def=1e-37" json:"eps,omitempty"`
	MatrixLayout     *MatrixLayout `protobuf:"varint,8,opt,name=matrix_layout,json=matrixLayout,enum=artm.MatrixLayout,def=0" json:"matrix_layout,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *GetTopicModelArgs) Reset()                    { *m = GetTopicModelArgs{} }
func (m *GetTopicModelArgs) String() string            { return proto.CompactTextString(m) }
func (*GetTopicModelArgs) ProtoMessage()               {}
func (*GetTopicModelArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{57} }

const Default_GetTopicModelArgs_Eps float32 = 1e-37
const Default_GetTopicModelArgs_MatrixLayout MatrixLayout = MatrixLayout_MatrixLayout_Dense

func (m *GetTopicModelArgs) GetModelName() string {
	if m != nil && m.ModelName != nil {
		return *m.ModelName
	}
	return ""
}

func (m *GetTopicModelArgs) GetTopicName() []string {
	if m != nil {
		return m.TopicName
	}
	return nil
}

func (m *GetTopicModelArgs) GetToken() []string {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *GetTopicModelArgs) GetClassId() []string {
	if m != nil {
		return m.ClassId
	}
	return nil
}

func (m *GetTopicModelArgs) GetUseSparseFormat() bool {
	if m != nil && m.UseSparseFormat != nil {
		return *m.UseSparseFormat
	}
	return false
}

func (m *GetTopicModelArgs) GetEps() float32 {
	if m != nil && m.Eps != nil {
		return *m.Eps
	}
	return Default_GetTopicModelArgs_Eps
}

func (m *GetTopicModelArgs) GetMatrixLayout() MatrixLayout {
	if m != nil && m.MatrixLayout != nil {
		return *m.MatrixLayout
	}
	return Default_GetTopicModelArgs_MatrixLayout
}

type GetThetaMatrixArgs struct {
	TopicName        []string      `protobuf:"bytes,3,rep,name=topic_name,json=topicName" json:"topic_name,omitempty"`
	UseSparseFormat  *bool         `protobuf:"varint,6,opt,name=use_sparse_format,json=useSparseFormat" json:"use_sparse_format,omitempty"`
	Eps              *float32      `protobuf:"fixed32,7,opt,name=eps,def=1e-37" json:"eps,omitempty"`
	MatrixLayout     *MatrixLayout `protobuf:"varint,8,opt,name=matrix_layout,json=matrixLayout,enum=artm.MatrixLayout,def=0" json:"matrix_layout,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *GetThetaMatrixArgs) Reset()                    { *m = GetThetaMatrixArgs{} }
func (m *GetThetaMatrixArgs) String() string            { return proto.CompactTextString(m) }
func (*GetThetaMatrixArgs) ProtoMessage()               {}
func (*GetThetaMatrixArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{58} }

const Default_GetThetaMatrixArgs_Eps float32 = 1e-37
const Default_GetThetaMatrixArgs_MatrixLayout MatrixLayout = MatrixLayout_MatrixLayout_Dense

func (m *GetThetaMatrixArgs) GetTopicName() []string {
	if m != nil {
		return m.TopicName
	}
	return nil
}

func (m *GetThetaMatrixArgs) GetUseSparseFormat() bool {
	if m != nil && m.UseSparseFormat != nil {
		return *m.UseSparseFormat
	}
	return false
}

func (m *GetThetaMatrixArgs) GetEps() float32 {
	if m != nil && m.Eps != nil {
		return *m.Eps
	}
	return Default_GetThetaMatrixArgs_Eps
}

func (m *GetThetaMatrixArgs) GetMatrixLayout() MatrixLayout {
	if m != nil && m.MatrixLayout != nil {
		return *m.MatrixLayout
	}
	return Default_GetThetaMatrixArgs_MatrixLayout
}

type GetScoreValueArgs struct {
	ScoreName        *string `protobuf:"bytes,2,opt,name=score_name,json=scoreName" json:"score_name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GetScoreValueArgs) Reset()                    { *m = GetScoreValueArgs{} }
func (m *GetScoreValueArgs) String() string            { return proto.CompactTextString(m) }
func (*GetScoreValueArgs) ProtoMessage()               {}
func (*GetScoreValueArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{59} }

func (m *GetScoreValueArgs) GetScoreName() string {
	if m != nil && m.ScoreName != nil {
		return *m.ScoreName
	}
	return ""
}

type GetScoreArrayArgs struct {
	ScoreName        *string `protobuf:"bytes,2,opt,name=score_name,json=scoreName" json:"score_name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GetScoreArrayArgs) Reset()                    { *m = GetScoreArrayArgs{} }
func (m *GetScoreArrayArgs) String() string            { return proto.CompactTextString(m) }
func (*GetScoreArrayArgs) ProtoMessage()               {}
func (*GetScoreArrayArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{60} }

func (m *GetScoreArrayArgs) GetScoreName() string {
	if m != nil && m.ScoreName != nil {
		return *m.ScoreName
	}
	return ""
}

type ExportModelArgs struct {
	FileName         *string `protobuf:"bytes,1,opt,name=file_name,json=fileName" json:"file_name,omitempty"`
	ModelName        *string `protobuf:"bytes,2,opt,name=model_name,json=modelName" json:"model_name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ExportModelArgs) Reset()                    { *m = ExportModelArgs{} }
func (m *ExportModelArgs) String() string            { return proto.CompactTextString(m) }
func (*ExportModelArgs) ProtoMessage()               {}
func (*ExportModelArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{61} }

func (m *ExportModelArgs) GetFileName() string {
	if m != nil && m.FileName != nil {
		return *m.FileName
	}
	return ""
}

func (m *ExportModelArgs) GetModelName() string {
	if m != nil && m.ModelName != nil {
		return *m.ModelName
	}
	return ""
}

type ImportModelArgs struct {
	FileName         *string `protobuf:"bytes,1,opt,name=file_name,json=fileName" json:"file_name,omitempty"`
	ModelName        *string `protobuf:"bytes,2,opt,name=model_name,json=modelName" json:"model_name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ImportModelArgs) Reset()                    { *m = ImportModelArgs{} }
func (m *ImportModelArgs) String() string            { return proto.CompactTextString(m) }
func (*ImportModelArgs) ProtoMessage()               {}
func (*ImportModelArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{62} }

func (m *ImportModelArgs) GetFileName() string {
	if m != nil && m.FileName != nil {
		return *m.FileName
	}
	return ""
}

func (m *ImportModelArgs) GetModelName() string {
	if m != nil && m.ModelName != nil {
		return *m.ModelName
	}
	return ""
}

type AttachModelArgs struct {
	ModelName        *string `protobuf:"bytes,1,opt,name=model_name,json=modelName" json:"model_name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *AttachModelArgs) Reset()                    { *m = AttachModelArgs{} }
func (m *AttachModelArgs) String() string            { return proto.CompactTextString(m) }
func (*AttachModelArgs) ProtoMessage()               {}
func (*AttachModelArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{63} }

func (m *AttachModelArgs) GetModelName() string {
	if m != nil && m.ModelName != nil {
		return *m.ModelName
	}
	return ""
}

type ProcessBatchesArgs struct {
	NwtTargetName     *string          `protobuf:"bytes,1,opt,name=nwt_target_name,json=nwtTargetName" json:"nwt_target_name,omitempty"`
	BatchFilename     []string         `protobuf:"bytes,2,rep,name=batch_filename,json=batchFilename" json:"batch_filename,omitempty"`
	PwtSourceName     *string          `protobuf:"bytes,3,opt,name=pwt_source_name,json=pwtSourceName" json:"pwt_source_name,omitempty"`
	NumDocumentPasses *int32           `protobuf:"varint,4,opt,name=num_document_passes,json=numDocumentPasses,def=10" json:"num_document_passes,omitempty"`
	RegularizerName   []string         `protobuf:"bytes,6,rep,name=regularizer_name,json=regularizerName" json:"regularizer_name,omitempty"`
	RegularizerTau    []float64        `protobuf:"fixed64,7,rep,name=regularizer_tau,json=regularizerTau" json:"regularizer_tau,omitempty"`
	ClassId           []string         `protobuf:"bytes,8,rep,name=class_id,json=classId" json:"class_id,omitempty"`
	ClassWeight       []float32        `protobuf:"fixed32,9,rep,name=class_weight,json=classWeight" json:"class_weight,omitempty"`
	ReuseTheta        *bool            `protobuf:"varint,10,opt,name=reuse_theta,json=reuseTheta,def=0" json:"reuse_theta,omitempty"`
	OptForAvx         *bool            `protobuf:"varint,11,opt,name=opt_for_avx,json=optForAvx,def=1" json:"opt_for_avx,omitempty"`
	ThetaMatrixType   *ThetaMatrixType `protobuf:"varint,14,opt,name=theta_matrix_type,json=thetaMatrixType,enum=artm.ThetaMatrixType,def=3" json:"theta_matrix_type,omitempty"`
	BatchWeight       []float32        `protobuf:"fixed32,15,rep,name=batch_weight,json=batchWeight" json:"batch_weight,omitempty"`
	PredictClassId    *string          `protobuf:"bytes,17,opt,name=predict_class_id,json=predictClassId" json:"predict_class_id,omitempty"`
	Batch             []*Batch         `protobuf:"bytes,18,rep,name=batch" json:"batch,omitempty"`
	UseRandomTheta    *bool            `protobuf:"varint,19,opt,name=use_random_theta,json=useRandomTheta,def=0" json:"use_random_theta,omitempty"`
	TopicName         []string         `protobuf:"bytes,20,rep,name=topic_name,json=topicName" json:"topic_name,omitempty"`
	XXX_unrecognized  []byte           `json:"-"`
}

func (m *ProcessBatchesArgs) Reset()                    { *m = ProcessBatchesArgs{} }
func (m *ProcessBatchesArgs) String() string            { return proto.CompactTextString(m) }
func (*ProcessBatchesArgs) ProtoMessage()               {}
func (*ProcessBatchesArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{64} }

const Default_ProcessBatchesArgs_NumDocumentPasses int32 = 10
const Default_ProcessBatchesArgs_ReuseTheta bool = false
const Default_ProcessBatchesArgs_OptForAvx bool = true
const Default_ProcessBatchesArgs_ThetaMatrixType ThetaMatrixType = ThetaMatrixType_ThetaMatrixType_Cache
const Default_ProcessBatchesArgs_UseRandomTheta bool = false

func (m *ProcessBatchesArgs) GetNwtTargetName() string {
	if m != nil && m.NwtTargetName != nil {
		return *m.NwtTargetName
	}
	return ""
}

func (m *ProcessBatchesArgs) GetBatchFilename() []string {
	if m != nil {
		return m.BatchFilename
	}
	return nil
}

func (m *ProcessBatchesArgs) GetPwtSourceName() string {
	if m != nil && m.PwtSourceName != nil {
		return *m.PwtSourceName
	}
	return ""
}

func (m *ProcessBatchesArgs) GetNumDocumentPasses() int32 {
	if m != nil && m.NumDocumentPasses != nil {
		return *m.NumDocumentPasses
	}
	return Default_ProcessBatchesArgs_NumDocumentPasses
}

func (m *ProcessBatchesArgs) GetRegularizerName() []string {
	if m != nil {
		return m.RegularizerName
	}
	return nil
}

func (m *ProcessBatchesArgs) GetRegularizerTau() []float64 {
	if m != nil {
		return m.RegularizerTau
	}
	return nil
}

func (m *ProcessBatchesArgs) GetClassId() []string {
	if m != nil {
		return m.ClassId
	}
	return nil
}

func (m *ProcessBatchesArgs) GetClassWeight() []float32 {
	if m != nil {
		return m.ClassWeight
	}
	return nil
}

func (m *ProcessBatchesArgs) GetReuseTheta() bool {
	if m != nil && m.ReuseTheta != nil {
		return *m.ReuseTheta
	}
	return Default_ProcessBatchesArgs_ReuseTheta
}

func (m *ProcessBatchesArgs) GetOptForAvx() bool {
	if m != nil && m.OptForAvx != nil {
		return *m.OptForAvx
	}
	return Default_ProcessBatchesArgs_OptForAvx
}

func (m *ProcessBatchesArgs) GetThetaMatrixType() ThetaMatrixType {
	if m != nil && m.ThetaMatrixType != nil {
		return *m.ThetaMatrixType
	}
	return Default_ProcessBatchesArgs_ThetaMatrixType
}

func (m *ProcessBatchesArgs) GetBatchWeight() []float32 {
	if m != nil {
		return m.BatchWeight
	}
	return nil
}

func (m *ProcessBatchesArgs) GetPredictClassId() string {
	if m != nil && m.PredictClassId != nil {
		return *m.PredictClassId
	}
	return ""
}

func (m *ProcessBatchesArgs) GetBatch() []*Batch {
	if m != nil {
		return m.Batch
	}
	return nil
}

func (m *ProcessBatchesArgs) GetUseRandomTheta() bool {
	if m != nil && m.UseRandomTheta != nil {
		return *m.UseRandomTheta
	}
	return Default_ProcessBatchesArgs_UseRandomTheta
}

func (m *ProcessBatchesArgs) GetTopicName() []string {
	if m != nil {
		return m.TopicName
	}
	return nil
}

type ProcessBatchesResult struct {
	ScoreData        []*ScoreData `protobuf:"bytes,1,rep,name=score_data,json=scoreData" json:"score_data,omitempty"`
	ThetaMatrix      *ThetaMatrix `protobuf:"bytes,2,opt,name=theta_matrix,json=thetaMatrix" json:"theta_matrix,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *ProcessBatchesResult) Reset()                    { *m = ProcessBatchesResult{} }
func (m *ProcessBatchesResult) String() string            { return proto.CompactTextString(m) }
func (*ProcessBatchesResult) ProtoMessage()               {}
func (*ProcessBatchesResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{65} }

func (m *ProcessBatchesResult) GetScoreData() []*ScoreData {
	if m != nil {
		return m.ScoreData
	}
	return nil
}

func (m *ProcessBatchesResult) GetThetaMatrix() *ThetaMatrix {
	if m != nil {
		return m.ThetaMatrix
	}
	return nil
}

type MergeModelArgs struct {
	NwtTargetName    *string   `protobuf:"bytes,1,opt,name=nwt_target_name,json=nwtTargetName" json:"nwt_target_name,omitempty"`
	NwtSourceName    []string  `protobuf:"bytes,2,rep,name=nwt_source_name,json=nwtSourceName" json:"nwt_source_name,omitempty"`
	SourceWeight     []float32 `protobuf:"fixed32,3,rep,name=source_weight,json=sourceWeight" json:"source_weight,omitempty"`
	TopicName        []string  `protobuf:"bytes,4,rep,name=topic_name,json=topicName" json:"topic_name,omitempty"`
	DictionaryName   *string   `protobuf:"bytes,5,opt,name=dictionary_name,json=dictionaryName" json:"dictionary_name,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *MergeModelArgs) Reset()                    { *m = MergeModelArgs{} }
func (m *MergeModelArgs) String() string            { return proto.CompactTextString(m) }
func (*MergeModelArgs) ProtoMessage()               {}
func (*MergeModelArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{66} }

func (m *MergeModelArgs) GetNwtTargetName() string {
	if m != nil && m.NwtTargetName != nil {
		return *m.NwtTargetName
	}
	return ""
}

func (m *MergeModelArgs) GetNwtSourceName() []string {
	if m != nil {
		return m.NwtSourceName
	}
	return nil
}

func (m *MergeModelArgs) GetSourceWeight() []float32 {
	if m != nil {
		return m.SourceWeight
	}
	return nil
}

func (m *MergeModelArgs) GetTopicName() []string {
	if m != nil {
		return m.TopicName
	}
	return nil
}

func (m *MergeModelArgs) GetDictionaryName() string {
	if m != nil && m.DictionaryName != nil {
		return *m.DictionaryName
	}
	return ""
}

type RegularizeModelArgs struct {
	RwtTargetName       *string                `protobuf:"bytes,1,opt,name=rwt_target_name,json=rwtTargetName" json:"rwt_target_name,omitempty"`
	PwtSourceName       *string                `protobuf:"bytes,2,opt,name=pwt_source_name,json=pwtSourceName" json:"pwt_source_name,omitempty"`
	NwtSourceName       *string                `protobuf:"bytes,3,opt,name=nwt_source_name,json=nwtSourceName" json:"nwt_source_name,omitempty"`
	RegularizerSettings []*RegularizerSettings `protobuf:"bytes,4,rep,name=regularizer_settings,json=regularizerSettings" json:"regularizer_settings,omitempty"`
	XXX_unrecognized    []byte                 `json:"-"`
}

func (m *RegularizeModelArgs) Reset()                    { *m = RegularizeModelArgs{} }
func (m *RegularizeModelArgs) String() string            { return proto.CompactTextString(m) }
func (*RegularizeModelArgs) ProtoMessage()               {}
func (*RegularizeModelArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{67} }

func (m *RegularizeModelArgs) GetRwtTargetName() string {
	if m != nil && m.RwtTargetName != nil {
		return *m.RwtTargetName
	}
	return ""
}

func (m *RegularizeModelArgs) GetPwtSourceName() string {
	if m != nil && m.PwtSourceName != nil {
		return *m.PwtSourceName
	}
	return ""
}

func (m *RegularizeModelArgs) GetNwtSourceName() string {
	if m != nil && m.NwtSourceName != nil {
		return *m.NwtSourceName
	}
	return ""
}

func (m *RegularizeModelArgs) GetRegularizerSettings() []*RegularizerSettings {
	if m != nil {
		return m.RegularizerSettings
	}
	return nil
}

type NormalizeModelArgs struct {
	PwtTargetName    *string `protobuf:"bytes,1,opt,name=pwt_target_name,json=pwtTargetName" json:"pwt_target_name,omitempty"`
	NwtSourceName    *string `protobuf:"bytes,2,opt,name=nwt_source_name,json=nwtSourceName" json:"nwt_source_name,omitempty"`
	RwtSourceName    *string `protobuf:"bytes,3,opt,name=rwt_source_name,json=rwtSourceName" json:"rwt_source_name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *NormalizeModelArgs) Reset()                    { *m = NormalizeModelArgs{} }
func (m *NormalizeModelArgs) String() string            { return proto.CompactTextString(m) }
func (*NormalizeModelArgs) ProtoMessage()               {}
func (*NormalizeModelArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{68} }

func (m *NormalizeModelArgs) GetPwtTargetName() string {
	if m != nil && m.PwtTargetName != nil {
		return *m.PwtTargetName
	}
	return ""
}

func (m *NormalizeModelArgs) GetNwtSourceName() string {
	if m != nil && m.NwtSourceName != nil {
		return *m.NwtSourceName
	}
	return ""
}

func (m *NormalizeModelArgs) GetRwtSourceName() string {
	if m != nil && m.RwtSourceName != nil {
		return *m.RwtSourceName
	}
	return ""
}

type ImportDictionaryArgs struct {
	FileName         *string `protobuf:"bytes,1,opt,name=file_name,json=fileName" json:"file_name,omitempty"`
	DictionaryName   *string `protobuf:"bytes,2,opt,name=dictionary_name,json=dictionaryName" json:"dictionary_name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ImportDictionaryArgs) Reset()                    { *m = ImportDictionaryArgs{} }
func (m *ImportDictionaryArgs) String() string            { return proto.CompactTextString(m) }
func (*ImportDictionaryArgs) ProtoMessage()               {}
func (*ImportDictionaryArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{69} }

func (m *ImportDictionaryArgs) GetFileName() string {
	if m != nil && m.FileName != nil {
		return *m.FileName
	}
	return ""
}

func (m *ImportDictionaryArgs) GetDictionaryName() string {
	if m != nil && m.DictionaryName != nil {
		return *m.DictionaryName
	}
	return ""
}

type ExportDictionaryArgs struct {
	FileName         *string `protobuf:"bytes,1,opt,name=file_name,json=fileName" json:"file_name,omitempty"`
	DictionaryName   *string `protobuf:"bytes,2,opt,name=dictionary_name,json=dictionaryName" json:"dictionary_name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ExportDictionaryArgs) Reset()                    { *m = ExportDictionaryArgs{} }
func (m *ExportDictionaryArgs) String() string            { return proto.CompactTextString(m) }
func (*ExportDictionaryArgs) ProtoMessage()               {}
func (*ExportDictionaryArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{70} }

func (m *ExportDictionaryArgs) GetFileName() string {
	if m != nil && m.FileName != nil {
		return *m.FileName
	}
	return ""
}

func (m *ExportDictionaryArgs) GetDictionaryName() string {
	if m != nil && m.DictionaryName != nil {
		return *m.DictionaryName
	}
	return ""
}

type DuplicateMasterComponentArgs struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *DuplicateMasterComponentArgs) Reset()                    { *m = DuplicateMasterComponentArgs{} }
func (m *DuplicateMasterComponentArgs) String() string            { return proto.CompactTextString(m) }
func (*DuplicateMasterComponentArgs) ProtoMessage()               {}
func (*DuplicateMasterComponentArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{71} }

type GetMasterComponentInfoArgs struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *GetMasterComponentInfoArgs) Reset()                    { *m = GetMasterComponentInfoArgs{} }
func (m *GetMasterComponentInfoArgs) String() string            { return proto.CompactTextString(m) }
func (*GetMasterComponentInfoArgs) ProtoMessage()               {}
func (*GetMasterComponentInfoArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{72} }

type MasterComponentInfo struct {
	Config             *MasterModelConfig                     `protobuf:"bytes,2,opt,name=config" json:"config,omitempty"`
	Regularizer        []*MasterComponentInfo_RegularizerInfo `protobuf:"bytes,3,rep,name=regularizer" json:"regularizer,omitempty"`
	Score              []*MasterComponentInfo_ScoreInfo       `protobuf:"bytes,4,rep,name=score" json:"score,omitempty"`
	Dictionary         []*MasterComponentInfo_DictionaryInfo  `protobuf:"bytes,5,rep,name=dictionary" json:"dictionary,omitempty"`
	Model              []*MasterComponentInfo_ModelInfo       `protobuf:"bytes,6,rep,name=model" json:"model,omitempty"`
	CacheEntry         []*MasterComponentInfo_CacheEntryInfo  `protobuf:"bytes,7,rep,name=cache_entry,json=cacheEntry" json:"cache_entry,omitempty"`
	ProcessorQueueSize *int32                                 `protobuf:"varint,9,opt,name=processor_queue_size,json=processorQueueSize" json:"processor_queue_size,omitempty"`
	Batch              []*MasterComponentInfo_BatchInfo       `protobuf:"bytes,10,rep,name=batch" json:"batch,omitempty"`
	NumProcessors      *int32                                 `protobuf:"varint,11,opt,name=num_processors,json=numProcessors" json:"num_processors,omitempty"`
	XXX_unrecognized   []byte                                 `json:"-"`
}

func (m *MasterComponentInfo) Reset()                    { *m = MasterComponentInfo{} }
func (m *MasterComponentInfo) String() string            { return proto.CompactTextString(m) }
func (*MasterComponentInfo) ProtoMessage()               {}
func (*MasterComponentInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{73} }

func (m *MasterComponentInfo) GetConfig() *MasterModelConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *MasterComponentInfo) GetRegularizer() []*MasterComponentInfo_RegularizerInfo {
	if m != nil {
		return m.Regularizer
	}
	return nil
}

func (m *MasterComponentInfo) GetScore() []*MasterComponentInfo_ScoreInfo {
	if m != nil {
		return m.Score
	}
	return nil
}

func (m *MasterComponentInfo) GetDictionary() []*MasterComponentInfo_DictionaryInfo {
	if m != nil {
		return m.Dictionary
	}
	return nil
}

func (m *MasterComponentInfo) GetModel() []*MasterComponentInfo_ModelInfo {
	if m != nil {
		return m.Model
	}
	return nil
}

func (m *MasterComponentInfo) GetCacheEntry() []*MasterComponentInfo_CacheEntryInfo {
	if m != nil {
		return m.CacheEntry
	}
	return nil
}

func (m *MasterComponentInfo) GetProcessorQueueSize() int32 {
	if m != nil && m.ProcessorQueueSize != nil {
		return *m.ProcessorQueueSize
	}
	return 0
}

func (m *MasterComponentInfo) GetBatch() []*MasterComponentInfo_BatchInfo {
	if m != nil {
		return m.Batch
	}
	return nil
}

func (m *MasterComponentInfo) GetNumProcessors() int32 {
	if m != nil && m.NumProcessors != nil {
		return *m.NumProcessors
	}
	return 0
}

type MasterComponentInfo_RegularizerInfo struct {
	Name             *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Type             *string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MasterComponentInfo_RegularizerInfo) Reset()         { *m = MasterComponentInfo_RegularizerInfo{} }
func (m *MasterComponentInfo_RegularizerInfo) String() string { return proto.CompactTextString(m) }
func (*MasterComponentInfo_RegularizerInfo) ProtoMessage()    {}
func (*MasterComponentInfo_RegularizerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{73, 0}
}

func (m *MasterComponentInfo_RegularizerInfo) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *MasterComponentInfo_RegularizerInfo) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

type MasterComponentInfo_ScoreInfo struct {
	Name             *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Type             *string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MasterComponentInfo_ScoreInfo) Reset()         { *m = MasterComponentInfo_ScoreInfo{} }
func (m *MasterComponentInfo_ScoreInfo) String() string { return proto.CompactTextString(m) }
func (*MasterComponentInfo_ScoreInfo) ProtoMessage()    {}
func (*MasterComponentInfo_ScoreInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{73, 1}
}

func (m *MasterComponentInfo_ScoreInfo) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *MasterComponentInfo_ScoreInfo) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

type MasterComponentInfo_DictionaryInfo struct {
	Name             *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	NumEntries       *int64  `protobuf:"varint,2,opt,name=num_entries,json=numEntries" json:"num_entries,omitempty"`
	ByteSize         *int64  `protobuf:"varint,3,opt,name=byte_size,json=byteSize" json:"byte_size,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MasterComponentInfo_DictionaryInfo) Reset()         { *m = MasterComponentInfo_DictionaryInfo{} }
func (m *MasterComponentInfo_DictionaryInfo) String() string { return proto.CompactTextString(m) }
func (*MasterComponentInfo_DictionaryInfo) ProtoMessage()    {}
func (*MasterComponentInfo_DictionaryInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{73, 2}
}

func (m *MasterComponentInfo_DictionaryInfo) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *MasterComponentInfo_DictionaryInfo) GetNumEntries() int64 {
	if m != nil && m.NumEntries != nil {
		return *m.NumEntries
	}
	return 0
}

func (m *MasterComponentInfo_DictionaryInfo) GetByteSize() int64 {
	if m != nil && m.ByteSize != nil {
		return *m.ByteSize
	}
	return 0
}

type MasterComponentInfo_BatchInfo struct {
	Name             *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	NumItems         *int32  `protobuf:"varint,2,opt,name=num_items,json=numItems" json:"num_items,omitempty"`
	NumTokens        *int32  `protobuf:"varint,3,opt,name=num_tokens,json=numTokens" json:"num_tokens,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MasterComponentInfo_BatchInfo) Reset()         { *m = MasterComponentInfo_BatchInfo{} }
func (m *MasterComponentInfo_BatchInfo) String() string { return proto.CompactTextString(m) }
func (*MasterComponentInfo_BatchInfo) ProtoMessage()    {}
func (*MasterComponentInfo_BatchInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{73, 3}
}

func (m *MasterComponentInfo_BatchInfo) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *MasterComponentInfo_BatchInfo) GetNumItems() int32 {
	if m != nil && m.NumItems != nil {
		return *m.NumItems
	}
	return 0
}

func (m *MasterComponentInfo_BatchInfo) GetNumTokens() int32 {
	if m != nil && m.NumTokens != nil {
		return *m.NumTokens
	}
	return 0
}

type MasterComponentInfo_ModelInfo struct {
	Name             *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Type             *string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	NumTopics        *int32  `protobuf:"varint,3,opt,name=num_topics,json=numTopics" json:"num_topics,omitempty"`
	NumTokens        *int32  `protobuf:"varint,4,opt,name=num_tokens,json=numTokens" json:"num_tokens,omitempty"`
	ByteSize         *int64  `protobuf:"varint,5,opt,name=byte_size,json=byteSize" json:"byte_size,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MasterComponentInfo_ModelInfo) Reset()         { *m = MasterComponentInfo_ModelInfo{} }
func (m *MasterComponentInfo_ModelInfo) String() string { return proto.CompactTextString(m) }
func (*MasterComponentInfo_ModelInfo) ProtoMessage()    {}
func (*MasterComponentInfo_ModelInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{73, 4}
}

func (m *MasterComponentInfo_ModelInfo) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *MasterComponentInfo_ModelInfo) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *MasterComponentInfo_ModelInfo) GetNumTopics() int32 {
	if m != nil && m.NumTopics != nil {
		return *m.NumTopics
	}
	return 0
}

func (m *MasterComponentInfo_ModelInfo) GetNumTokens() int32 {
	if m != nil && m.NumTokens != nil {
		return *m.NumTokens
	}
	return 0
}

func (m *MasterComponentInfo_ModelInfo) GetByteSize() int64 {
	if m != nil && m.ByteSize != nil {
		return *m.ByteSize
	}
	return 0
}

type MasterComponentInfo_CacheEntryInfo struct {
	Key              *string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	ByteSize         *int32  `protobuf:"varint,2,opt,name=byte_size,json=byteSize" json:"byte_size,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MasterComponentInfo_CacheEntryInfo) Reset()         { *m = MasterComponentInfo_CacheEntryInfo{} }
func (m *MasterComponentInfo_CacheEntryInfo) String() string { return proto.CompactTextString(m) }
func (*MasterComponentInfo_CacheEntryInfo) ProtoMessage()    {}
func (*MasterComponentInfo_CacheEntryInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{73, 5}
}

func (m *MasterComponentInfo_CacheEntryInfo) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *MasterComponentInfo_CacheEntryInfo) GetByteSize() int32 {
	if m != nil && m.ByteSize != nil {
		return *m.ByteSize
	}
	return 0
}

type ImportBatchesArgs struct {
	Batch            []*Batch `protobuf:"bytes,3,rep,name=batch" json:"batch,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *ImportBatchesArgs) Reset()                    { *m = ImportBatchesArgs{} }
func (m *ImportBatchesArgs) String() string            { return proto.CompactTextString(m) }
func (*ImportBatchesArgs) ProtoMessage()               {}
func (*ImportBatchesArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{74} }

func (m *ImportBatchesArgs) GetBatch() []*Batch {
	if m != nil {
		return m.Batch
	}
	return nil
}

type AwaitOperationArgs struct {
	TimeoutMilliseconds *int32 `protobuf:"varint,1,opt,name=timeout_milliseconds,json=timeoutMilliseconds,def=-1" json:"timeout_milliseconds,omitempty"`
	XXX_unrecognized    []byte `json:"-"`
}

func (m *AwaitOperationArgs) Reset()                    { *m = AwaitOperationArgs{} }
func (m *AwaitOperationArgs) String() string            { return proto.CompactTextString(m) }
func (*AwaitOperationArgs) ProtoMessage()               {}
func (*AwaitOperationArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{75} }

const Default_AwaitOperationArgs_TimeoutMilliseconds int32 = -1

func (m *AwaitOperationArgs) GetTimeoutMilliseconds() int32 {
	if m != nil && m.TimeoutMilliseconds != nil {
		return *m.TimeoutMilliseconds
	}
	return Default_AwaitOperationArgs_TimeoutMilliseconds
}

type MasterModelConfig struct {
	TopicName         []string             `protobuf:"bytes,1,rep,name=topic_name,json=topicName" json:"topic_name,omitempty"`
	ClassId           []string             `protobuf:"bytes,2,rep,name=class_id,json=classId" json:"class_id,omitempty"`
	ClassWeight       []float32            `protobuf:"fixed32,3,rep,name=class_weight,json=classWeight" json:"class_weight,omitempty"`
	ScoreConfig       []*ScoreConfig       `protobuf:"bytes,4,rep,name=score_config,json=scoreConfig" json:"score_config,omitempty"`
	RegularizerConfig []*RegularizerConfig `protobuf:"bytes,5,rep,name=regularizer_config,json=regularizerConfig" json:"regularizer_config,omitempty"`
	NumProcessors     *int32               `protobuf:"varint,6,opt,name=num_processors,json=numProcessors" json:"num_processors,omitempty"`
	PwtName           *string              `protobuf:"bytes,7,opt,name=pwt_name,json=pwtName,def=pwt" json:"pwt_name,omitempty"`
	NwtName           *string              `protobuf:"bytes,8,opt,name=nwt_name,json=nwtName,def=nwt" json:"nwt_name,omitempty"`
	NumDocumentPasses *int32               `protobuf:"varint,9,opt,name=num_document_passes,json=numDocumentPasses" json:"num_document_passes,omitempty"`
	ReuseTheta        *bool                `protobuf:"varint,10,opt,name=reuse_theta,json=reuseTheta,def=0" json:"reuse_theta,omitempty"`
	OptForAvx         *bool                `protobuf:"varint,11,opt,name=opt_for_avx,json=optForAvx,def=1" json:"opt_for_avx,omitempty"`
	DiskCachePath     *string              `protobuf:"bytes,13,opt,name=disk_cache_path,json=diskCachePath" json:"disk_cache_path,omitempty"`
	CacheTheta        *bool                `protobuf:"varint,15,opt,name=cache_theta,json=cacheTheta,def=0" json:"cache_theta,omitempty"`
	PtdName           *string              `protobuf:"bytes,16,opt,name=ptd_name,json=ptdName,def=" json:"ptd_name,omitempty"`
	XXX_unrecognized  []byte               `json:"-"`
}

func (m *MasterModelConfig) Reset()                    { *m = MasterModelConfig{} }
func (m *MasterModelConfig) String() string            { return proto.CompactTextString(m) }
func (*MasterModelConfig) ProtoMessage()               {}
func (*MasterModelConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{76} }

const Default_MasterModelConfig_PwtName string = "pwt"
const Default_MasterModelConfig_NwtName string = "nwt"
const Default_MasterModelConfig_ReuseTheta bool = false
const Default_MasterModelConfig_OptForAvx bool = true
const Default_MasterModelConfig_CacheTheta bool = false

func (m *MasterModelConfig) GetTopicName() []string {
	if m != nil {
		return m.TopicName
	}
	return nil
}

func (m *MasterModelConfig) GetClassId() []string {
	if m != nil {
		return m.ClassId
	}
	return nil
}

func (m *MasterModelConfig) GetClassWeight() []float32 {
	if m != nil {
		return m.ClassWeight
	}
	return nil
}

func (m *MasterModelConfig) GetScoreConfig() []*ScoreConfig {
	if m != nil {
		return m.ScoreConfig
	}
	return nil
}

func (m *MasterModelConfig) GetRegularizerConfig() []*RegularizerConfig {
	if m != nil {
		return m.RegularizerConfig
	}
	return nil
}

func (m *MasterModelConfig) GetNumProcessors() int32 {
	if m != nil && m.NumProcessors != nil {
		return *m.NumProcessors
	}
	return 0
}

func (m *MasterModelConfig) GetPwtName() string {
	if m != nil && m.PwtName != nil {
		return *m.PwtName
	}
	return Default_MasterModelConfig_PwtName
}

func (m *MasterModelConfig) GetNwtName() string {
	if m != nil && m.NwtName != nil {
		return *m.NwtName
	}
	return Default_MasterModelConfig_NwtName
}

func (m *MasterModelConfig) GetNumDocumentPasses() int32 {
	if m != nil && m.NumDocumentPasses != nil {
		return *m.NumDocumentPasses
	}
	return 0
}

func (m *MasterModelConfig) GetReuseTheta() bool {
	if m != nil && m.ReuseTheta != nil {
		return *m.ReuseTheta
	}
	return Default_MasterModelConfig_ReuseTheta
}

func (m *MasterModelConfig) GetOptForAvx() bool {
	if m != nil && m.OptForAvx != nil {
		return *m.OptForAvx
	}
	return Default_MasterModelConfig_OptForAvx
}

func (m *MasterModelConfig) GetDiskCachePath() string {
	if m != nil && m.DiskCachePath != nil {
		return *m.DiskCachePath
	}
	return ""
}

func (m *MasterModelConfig) GetCacheTheta() bool {
	if m != nil && m.CacheTheta != nil {
		return *m.CacheTheta
	}
	return Default_MasterModelConfig_CacheTheta
}

func (m *MasterModelConfig) GetPtdName() string {
	if m != nil && m.PtdName != nil {
		return *m.PtdName
	}
	return ""
}

type FitOfflineMasterModelArgs struct {
	BatchFilename       []string  `protobuf:"bytes,1,rep,name=batch_filename,json=batchFilename" json:"batch_filename,omitempty"`
	BatchWeight         []float32 `protobuf:"fixed32,2,rep,name=batch_weight,json=batchWeight" json:"batch_weight,omitempty"`
	NumCollectionPasses *int32    `protobuf:"varint,3,opt,name=num_collection_passes,json=numCollectionPasses,def=1" json:"num_collection_passes,omitempty"`
	BatchFolder         *string   `protobuf:"bytes,4,opt,name=batch_folder,json=batchFolder" json:"batch_folder,omitempty"`
	XXX_unrecognized    []byte    `json:"-"`
}

func (m *FitOfflineMasterModelArgs) Reset()                    { *m = FitOfflineMasterModelArgs{} }
func (m *FitOfflineMasterModelArgs) String() string            { return proto.CompactTextString(m) }
func (*FitOfflineMasterModelArgs) ProtoMessage()               {}
func (*FitOfflineMasterModelArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{77} }

const Default_FitOfflineMasterModelArgs_NumCollectionPasses int32 = 1

func (m *FitOfflineMasterModelArgs) GetBatchFilename() []string {
	if m != nil {
		return m.BatchFilename
	}
	return nil
}

func (m *FitOfflineMasterModelArgs) GetBatchWeight() []float32 {
	if m != nil {
		return m.BatchWeight
	}
	return nil
}

func (m *FitOfflineMasterModelArgs) GetNumCollectionPasses() int32 {
	if m != nil && m.NumCollectionPasses != nil {
		return *m.NumCollectionPasses
	}
	return Default_FitOfflineMasterModelArgs_NumCollectionPasses
}

func (m *FitOfflineMasterModelArgs) GetBatchFolder() string {
	if m != nil && m.BatchFolder != nil {
		return *m.BatchFolder
	}
	return ""
}

type FitOnlineMasterModelArgs struct {
	BatchFilename    []string  `protobuf:"bytes,1,rep,name=batch_filename,json=batchFilename" json:"batch_filename,omitempty"`
	BatchWeight      []float32 `protobuf:"fixed32,2,rep,name=batch_weight,json=batchWeight" json:"batch_weight,omitempty"`
	UpdateAfter      []int32   `protobuf:"varint,3,rep,name=update_after,json=updateAfter" json:"update_after,omitempty"`
	ApplyWeight      []float32 `protobuf:"fixed32,4,rep,name=apply_weight,json=applyWeight" json:"apply_weight,omitempty"`
	DecayWeight      []float32 `protobuf:"fixed32,5,rep,name=decay_weight,json=decayWeight" json:"decay_weight,omitempty"`
	Async            *bool     `protobuf:"varint,6,opt,name=async,def=0" json:"async,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *FitOnlineMasterModelArgs) Reset()                    { *m = FitOnlineMasterModelArgs{} }
func (m *FitOnlineMasterModelArgs) String() string            { return proto.CompactTextString(m) }
func (*FitOnlineMasterModelArgs) ProtoMessage()               {}
func (*FitOnlineMasterModelArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{78} }

const Default_FitOnlineMasterModelArgs_Async bool = false

func (m *FitOnlineMasterModelArgs) GetBatchFilename() []string {
	if m != nil {
		return m.BatchFilename
	}
	return nil
}

func (m *FitOnlineMasterModelArgs) GetBatchWeight() []float32 {
	if m != nil {
		return m.BatchWeight
	}
	return nil
}

func (m *FitOnlineMasterModelArgs) GetUpdateAfter() []int32 {
	if m != nil {
		return m.UpdateAfter
	}
	return nil
}

func (m *FitOnlineMasterModelArgs) GetApplyWeight() []float32 {
	if m != nil {
		return m.ApplyWeight
	}
	return nil
}

func (m *FitOnlineMasterModelArgs) GetDecayWeight() []float32 {
	if m != nil {
		return m.DecayWeight
	}
	return nil
}

func (m *FitOnlineMasterModelArgs) GetAsync() bool {
	if m != nil && m.Async != nil {
		return *m.Async
	}
	return Default_FitOnlineMasterModelArgs_Async
}

type TransformMasterModelArgs struct {
	Batch            []*Batch         `protobuf:"bytes,1,rep,name=batch" json:"batch,omitempty"`
	BatchFilename    []string         `protobuf:"bytes,2,rep,name=batch_filename,json=batchFilename" json:"batch_filename,omitempty"`
	ThetaMatrixType  *ThetaMatrixType `protobuf:"varint,3,opt,name=theta_matrix_type,json=thetaMatrixType,enum=artm.ThetaMatrixType,def=1" json:"theta_matrix_type,omitempty"`
	PredictClassId   *string          `protobuf:"bytes,4,opt,name=predict_class_id,json=predictClassId" json:"predict_class_id,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *TransformMasterModelArgs) Reset()                    { *m = TransformMasterModelArgs{} }
func (m *TransformMasterModelArgs) String() string            { return proto.CompactTextString(m) }
func (*TransformMasterModelArgs) ProtoMessage()               {}
func (*TransformMasterModelArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{79} }

const Default_TransformMasterModelArgs_ThetaMatrixType ThetaMatrixType = ThetaMatrixType_ThetaMatrixType_Dense

func (m *TransformMasterModelArgs) GetBatch() []*Batch {
	if m != nil {
		return m.Batch
	}
	return nil
}

func (m *TransformMasterModelArgs) GetBatchFilename() []string {
	if m != nil {
		return m.BatchFilename
	}
	return nil
}

func (m *TransformMasterModelArgs) GetThetaMatrixType() ThetaMatrixType {
	if m != nil && m.ThetaMatrixType != nil {
		return *m.ThetaMatrixType
	}
	return Default_TransformMasterModelArgs_ThetaMatrixType
}

func (m *TransformMasterModelArgs) GetPredictClassId() string {
	if m != nil && m.PredictClassId != nil {
		return *m.PredictClassId
	}
	return ""
}

type ConfigureLoggingArgs struct {
	LogDir                *string `protobuf:"bytes,1,opt,name=log_dir,json=logDir" json:"log_dir,omitempty"`
	Minloglevel           *int32  `protobuf:"varint,2,opt,name=minloglevel" json:"minloglevel,omitempty"`
	Stderrthreshold       *int32  `protobuf:"varint,3,opt,name=stderrthreshold" json:"stderrthreshold,omitempty"`
	Logtostderr           *bool   `protobuf:"varint,4,opt,name=logtostderr" json:"logtostderr,omitempty"`
	Colorlogtostderr      *bool   `protobuf:"varint,5,opt,name=colorlogtostderr" json:"colorlogtostderr,omitempty"`
	Alsologtostderr       *bool   `protobuf:"varint,6,opt,name=alsologtostderr" json:"alsologtostderr,omitempty"`
	Logbufsecs            *int32  `protobuf:"varint,7,opt,name=logbufsecs" json:"logbufsecs,omitempty"`
	Logbuflevel           *int32  `protobuf:"varint,8,opt,name=logbuflevel" json:"logbuflevel,omitempty"`
	MaxLogSize            *int32  `protobuf:"varint,9,opt,name=max_log_size,json=maxLogSize" json:"max_log_size,omitempty"`
	StopLoggingIfFullDisk *bool   `protobuf:"varint,10,opt,name=stop_logging_if_full_disk,json=stopLoggingIfFullDisk" json:"stop_logging_if_full_disk,omitempty"`
	XXX_unrecognized      []byte  `json:"-"`
}

func (m *ConfigureLoggingArgs) Reset()                    { *m = ConfigureLoggingArgs{} }
func (m *ConfigureLoggingArgs) String() string            { return proto.CompactTextString(m) }
func (*ConfigureLoggingArgs) ProtoMessage()               {}
func (*ConfigureLoggingArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{80} }

func (m *ConfigureLoggingArgs) GetLogDir() string {
	if m != nil && m.LogDir != nil {
		return *m.LogDir
	}
	return ""
}

func (m *ConfigureLoggingArgs) GetMinloglevel() int32 {
	if m != nil && m.Minloglevel != nil {
		return *m.Minloglevel
	}
	return 0
}

func (m *ConfigureLoggingArgs) GetStderrthreshold() int32 {
	if m != nil && m.Stderrthreshold != nil {
		return *m.Stderrthreshold
	}
	return 0
}

func (m *ConfigureLoggingArgs) GetLogtostderr() bool {
	if m != nil && m.Logtostderr != nil {
		return *m.Logtostderr
	}
	return false
}

func (m *ConfigureLoggingArgs) GetColorlogtostderr() bool {
	if m != nil && m.Colorlogtostderr != nil {
		return *m.Colorlogtostderr
	}
	return false
}

func (m *ConfigureLoggingArgs) GetAlsologtostderr() bool {
	if m != nil && m.Alsologtostderr != nil {
		return *m.Alsologtostderr
	}
	return false
}

func (m *ConfigureLoggingArgs) GetLogbufsecs() int32 {
	if m != nil && m.Logbufsecs != nil {
		return *m.Logbufsecs
	}
	return 0
}

func (m *ConfigureLoggingArgs) GetLogbuflevel() int32 {
	if m != nil && m.Logbuflevel != nil {
		return *m.Logbuflevel
	}
	return 0
}

func (m *ConfigureLoggingArgs) GetMaxLogSize() int32 {
	if m != nil && m.MaxLogSize != nil {
		return *m.MaxLogSize
	}
	return 0
}

func (m *ConfigureLoggingArgs) GetStopLoggingIfFullDisk() bool {
	if m != nil && m.StopLoggingIfFullDisk != nil {
		return *m.StopLoggingIfFullDisk
	}
	return false
}

type ClearThetaCacheArgs struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *ClearThetaCacheArgs) Reset()                    { *m = ClearThetaCacheArgs{} }
func (m *ClearThetaCacheArgs) String() string            { return proto.CompactTextString(m) }
func (*ClearThetaCacheArgs) ProtoMessage()               {}
func (*ClearThetaCacheArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{81} }

type ClearScoreCacheArgs struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *ClearScoreCacheArgs) Reset()                    { *m = ClearScoreCacheArgs{} }
func (m *ClearScoreCacheArgs) String() string            { return proto.CompactTextString(m) }
func (*ClearScoreCacheArgs) ProtoMessage()               {}
func (*ClearScoreCacheArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{82} }

type ClearScoreArrayCacheArgs struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *ClearScoreArrayCacheArgs) Reset()                    { *m = ClearScoreArrayCacheArgs{} }
func (m *ClearScoreArrayCacheArgs) String() string            { return proto.CompactTextString(m) }
func (*ClearScoreArrayCacheArgs) ProtoMessage()               {}
func (*ClearScoreArrayCacheArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{83} }

func init() {
	proto.RegisterType((*DoubleArray)(nil), "artm.DoubleArray")
	proto.RegisterType((*FloatArray)(nil), "artm.FloatArray")
	proto.RegisterType((*BoolArray)(nil), "artm.BoolArray")
	proto.RegisterType((*IntArray)(nil), "artm.IntArray")
	proto.RegisterType((*StringArray)(nil), "artm.StringArray")
	proto.RegisterType((*Item)(nil), "artm.Item")
	proto.RegisterType((*Field)(nil), "artm.Field")
	proto.RegisterType((*Batch)(nil), "artm.Batch")
	proto.RegisterType((*RegularizerSettings)(nil), "artm.RegularizerSettings")
	proto.RegisterType((*RegularizerConfig)(nil), "artm.RegularizerConfig")
	proto.RegisterType((*SmoothSparseThetaConfig)(nil), "artm.SmoothSparseThetaConfig")
	proto.RegisterType((*SmoothSparsePhiConfig)(nil), "artm.SmoothSparsePhiConfig")
	proto.RegisterType((*DecorrelatorPhiConfig)(nil), "artm.DecorrelatorPhiConfig")
	proto.RegisterType((*MultiLanguagePhiConfig)(nil), "artm.MultiLanguagePhiConfig")
	proto.RegisterType((*LabelRegularizationPhiConfig)(nil), "artm.LabelRegularizationPhiConfig")
	proto.RegisterType((*SpecifiedSparsePhiConfig)(nil), "artm.SpecifiedSparsePhiConfig")
	proto.RegisterType((*ImproveCoherencePhiConfig)(nil), "artm.ImproveCoherencePhiConfig")
	proto.RegisterType((*SmoothPtdwConfig)(nil), "artm.SmoothPtdwConfig")
	proto.RegisterType((*TopicSelectionThetaConfig)(nil), "artm.TopicSelectionThetaConfig")
	proto.RegisterType((*BitermsPhiConfig)(nil), "artm.BitermsPhiConfig")
	proto.RegisterType((*HierarchySparsingThetaConfig)(nil), "artm.HierarchySparsingThetaConfig")
	proto.RegisterType((*TopicSegmentationPtdwConfig)(nil), "artm.TopicSegmentationPtdwConfig")
	proto.RegisterType((*TransformConfig)(nil), "artm.TransformConfig")
	proto.RegisterType((*ScoreConfig)(nil), "artm.ScoreConfig")
	proto.RegisterType((*ScoreData)(nil), "artm.ScoreData")
	proto.RegisterType((*ScoreArray)(nil), "artm.ScoreArray")
	proto.RegisterType((*PerplexityScoreConfig)(nil), "artm.PerplexityScoreConfig")
	proto.RegisterType((*PerplexityScore)(nil), "artm.PerplexityScore")
	proto.RegisterType((*SparsityThetaScoreConfig)(nil), "artm.SparsityThetaScoreConfig")
	proto.RegisterType((*SparsityThetaScore)(nil), "artm.SparsityThetaScore")
	proto.RegisterType((*SparsityPhiScoreConfig)(nil), "artm.SparsityPhiScoreConfig")
	proto.RegisterType((*SparsityPhiScore)(nil), "artm.SparsityPhiScore")
	proto.RegisterType((*ItemsProcessedScoreConfig)(nil), "artm.ItemsProcessedScoreConfig")
	proto.RegisterType((*ItemsProcessedScore)(nil), "artm.ItemsProcessedScore")
	proto.RegisterType((*TopTokensScoreConfig)(nil), "artm.TopTokensScoreConfig")
	proto.RegisterType((*TopTokensScore)(nil), "artm.TopTokensScore")
	proto.RegisterType((*ThetaSnippetScoreConfig)(nil), "artm.ThetaSnippetScoreConfig")
	proto.RegisterType((*ThetaSnippetScore)(nil), "artm.ThetaSnippetScore")
	proto.RegisterType((*TopicKernelScoreConfig)(nil), "artm.TopicKernelScoreConfig")
	proto.RegisterType((*TopicKernelScore)(nil), "artm.TopicKernelScore")
	proto.RegisterType((*TopicMassPhiScoreConfig)(nil), "artm.TopicMassPhiScoreConfig")
	proto.RegisterType((*TopicMassPhiScore)(nil), "artm.TopicMassPhiScore")
	proto.RegisterType((*ClassPrecisionScoreConfig)(nil), "artm.ClassPrecisionScoreConfig")
	proto.RegisterType((*ClassPrecisionScore)(nil), "artm.ClassPrecisionScore")
	proto.RegisterType((*PeakMemoryScoreConfig)(nil), "artm.PeakMemoryScoreConfig")
	proto.RegisterType((*PeakMemoryScore)(nil), "artm.PeakMemoryScore")
	proto.RegisterType((*BackgroundTokensRatioScoreConfig)(nil), "artm.BackgroundTokensRatioScoreConfig")
	proto.RegisterType((*BackgroundTokensRatioScore)(nil), "artm.BackgroundTokensRatioScore")
	proto.RegisterType((*TopicModel)(nil), "artm.TopicModel")
	proto.RegisterType((*ThetaMatrix)(nil), "artm.ThetaMatrix")
	proto.RegisterType((*CollectionParserConfig)(nil), "artm.CollectionParserConfig")
	proto.RegisterType((*CollectionParserInfo)(nil), "artm.CollectionParserInfo")
	proto.RegisterType((*InitializeModelArgs)(nil), "artm.InitializeModelArgs")
	proto.RegisterType((*DictionaryData)(nil), "artm.DictionaryData")
	proto.RegisterType((*FilterDictionaryArgs)(nil), "artm.FilterDictionaryArgs")
	proto.RegisterType((*GatherDictionaryArgs)(nil), "artm.GatherDictionaryArgs")
	proto.RegisterType((*GetDictionaryArgs)(nil), "artm.GetDictionaryArgs")
	proto.RegisterType((*GetTopicModelArgs)(nil), "artm.GetTopicModelArgs")
	proto.RegisterType((*GetThetaMatrixArgs)(nil), "artm.GetThetaMatrixArgs")
	proto.RegisterType((*GetScoreValueArgs)(nil), "artm.GetScoreValueArgs")
	proto.RegisterType((*GetScoreArrayArgs)(nil), "artm.GetScoreArrayArgs")
	proto.RegisterType((*ExportModelArgs)(nil), "artm.ExportModelArgs")
	proto.RegisterType((*ImportModelArgs)(nil), "artm.ImportModelArgs")
	proto.RegisterType((*AttachModelArgs)(nil), "artm.AttachModelArgs")
	proto.RegisterType((*ProcessBatchesArgs)(nil), "artm.ProcessBatchesArgs")
	proto.RegisterType((*ProcessBatchesResult)(nil), "artm.ProcessBatchesResult")
	proto.RegisterType((*MergeModelArgs)(nil), "artm.MergeModelArgs")
	proto.RegisterType((*RegularizeModelArgs)(nil), "artm.RegularizeModelArgs")
	proto.RegisterType((*NormalizeModelArgs)(nil), "artm.NormalizeModelArgs")
	proto.RegisterType((*ImportDictionaryArgs)(nil), "artm.ImportDictionaryArgs")
	proto.RegisterType((*ExportDictionaryArgs)(nil), "artm.ExportDictionaryArgs")
	proto.RegisterType((*DuplicateMasterComponentArgs)(nil), "artm.DuplicateMasterComponentArgs")
	proto.RegisterType((*GetMasterComponentInfoArgs)(nil), "artm.GetMasterComponentInfoArgs")
	proto.RegisterType((*MasterComponentInfo)(nil), "artm.MasterComponentInfo")
	proto.RegisterType((*MasterComponentInfo_RegularizerInfo)(nil), "artm.MasterComponentInfo.RegularizerInfo")
	proto.RegisterType((*MasterComponentInfo_ScoreInfo)(nil), "artm.MasterComponentInfo.ScoreInfo")
	proto.RegisterType((*MasterComponentInfo_DictionaryInfo)(nil), "artm.MasterComponentInfo.DictionaryInfo")
	proto.RegisterType((*MasterComponentInfo_BatchInfo)(nil), "artm.MasterComponentInfo.BatchInfo")
	proto.RegisterType((*MasterComponentInfo_ModelInfo)(nil), "artm.MasterComponentInfo.ModelInfo")
	proto.RegisterType((*MasterComponentInfo_CacheEntryInfo)(nil), "artm.MasterComponentInfo.CacheEntryInfo")
	proto.RegisterType((*ImportBatchesArgs)(nil), "artm.ImportBatchesArgs")
	proto.RegisterType((*AwaitOperationArgs)(nil), "artm.AwaitOperationArgs")
	proto.RegisterType((*MasterModelConfig)(nil), "artm.MasterModelConfig")
	proto.RegisterType((*FitOfflineMasterModelArgs)(nil), "artm.FitOfflineMasterModelArgs")
	proto.RegisterType((*FitOnlineMasterModelArgs)(nil), "artm.FitOnlineMasterModelArgs")
	proto.RegisterType((*TransformMasterModelArgs)(nil), "artm.TransformMasterModelArgs")
	proto.RegisterType((*ConfigureLoggingArgs)(nil), "artm.ConfigureLoggingArgs")
	proto.RegisterType((*ClearThetaCacheArgs)(nil), "artm.ClearThetaCacheArgs")
	proto.RegisterType((*ClearScoreCacheArgs)(nil), "artm.ClearScoreCacheArgs")
	proto.RegisterType((*ClearScoreArrayCacheArgs)(nil), "artm.ClearScoreArrayCacheArgs")
	proto.RegisterEnum("artm.RegularizerType", RegularizerType_name, RegularizerType_value)
	proto.RegisterEnum("artm.ScoreType", ScoreType_name, ScoreType_value)
	proto.RegisterEnum("artm.MatrixLayout", MatrixLayout_name, MatrixLayout_value)
	proto.RegisterEnum("artm.ThetaMatrixType", ThetaMatrixType_name, ThetaMatrixType_value)
	proto.RegisterEnum("artm.SpecifiedSparsePhiConfig_SparseMode", SpecifiedSparsePhiConfig_SparseMode_name, SpecifiedSparsePhiConfig_SparseMode_value)
	proto.RegisterEnum("artm.SmoothPtdwConfig_SmoothType", SmoothPtdwConfig_SmoothType_name, SmoothPtdwConfig_SmoothType_value)
	proto.RegisterEnum("artm.TransformConfig_TransformType", TransformConfig_TransformType_name, TransformConfig_TransformType_value)
	proto.RegisterEnum("artm.PerplexityScoreConfig_Type", PerplexityScoreConfig_Type_name, PerplexityScoreConfig_Type_value)
	proto.RegisterEnum("artm.CollectionParserConfig_CollectionFormat", CollectionParserConfig_CollectionFormat_name, CollectionParserConfig_CollectionFormat_value)
	proto.RegisterEnum("artm.CollectionParserConfig_BatchNameType", CollectionParserConfig_BatchNameType_name, CollectionParserConfig_BatchNameType_value)
}

func init() { proto.RegisterFile("messages.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 5064 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x3b, 0x5d, 0x6f, 0x1c, 0xc9,
	0x56, 0xe9, 0xf9, 0xb0, 0x67, 0xce, 0xd8, 0xe3, 0x76, 0xf9, 0x6b, 0xe2, 0x7c, 0xac, 0xd3, 0xd9,
	0x64, 0xb3, 0xe1, 0x6e, 0xae, 0xe3, 0xec, 0x06, 0x62, 0x56, 0xba, 0x9b, 0xd8, 0xf1, 0xae, 0x49,
	0xbc, 0xeb, 0xed, 0x78, 0x77, 0x91, 0x40, 0x6a, 0x95, 0xa7, 0x6b, 0xc6, 0x8d, 0x7b, 0xba, 0x9b,
	0xee, 0x9a, 0xd8, 0x5e, 0x10, 0x02, 0xf1, 0x72, 0x75, 0x75, 0x01, 0x5d, 0xb4, 0xbf, 0x80, 0x27,
	0x1e, 0x41, 0x82, 0x07, 0xa4, 0x2b, 0xc1, 0x0b, 0x0f, 0x20, 0x90, 0x78, 0xe0, 0x8d, 0x2b, 0x9e,
	0xd1, 0x7d, 0xe2, 0x1f, 0x80, 0xea, 0x54, 0x75, 0x77, 0x75, 0x4f, 0xdb, 0x49, 0x60, 0x77, 0x9f,
	0xec, 0x3e, 0xe7, 0x54, 0xd5, 0x39, 0xa7, 0x4e, 0x9d, 0xaf, 0xaa, 0x81, 0xee, 0x88, 0x25, 0x09,
	0x1d, 0xb2, 0xe4, 0x5e, 0x14, 0x87, 0x3c, 0x24, 0x0d, 0x1a, 0xf3, 0x91, 0xf5, 0x0e, 0x74, 0xb6,
	0xc3, 0xf1, 0xa1, 0xcf, 0x1e, 0xc7, 0x31, 0x3d, 0x23, 0x3d, 0x68, 0xbe, 0xa4, 0xfe, 0x98, 0xf5,
	0x8c, 0xb5, 0xfa, 0x1d, 0xe3, 0x49, 0xcd, 0x34, 0x6c, 0x09, 0xb0, 0x6e, 0x03, 0xec, 0xf8, 0x21,
	0xe5, 0x15, 0x74, 0x35, 0x9d, 0xee, 0x16, 0xb4, 0x9f, 0x84, 0xa1, 0x5f, 0x41, 0xd6, 0xd2, 0xc9,
	0xde, 0x86, 0xd6, 0x6e, 0x50, 0x35, 0x59, 0x53, 0xa7, 0xba, 0x09, 0x9d, 0x17, 0x3c, 0xf6, 0x82,
	0xa1, 0x24, 0x5c, 0xd4, 0x09, 0xdb, 0x29, 0xd1, 0x9f, 0x18, 0xd0, 0xd8, 0xe5, 0x6c, 0x44, 0xba,
	0x50, 0xf3, 0xdc, 0x9e, 0xb1, 0x66, 0xdc, 0x69, 0xda, 0x35, 0xcf, 0x25, 0x37, 0xa0, 0x39, 0xf0,
	0x98, 0xef, 0xf6, 0x6a, 0x6b, 0xf5, 0x3b, 0x9d, 0x8d, 0xce, 0x3d, 0x21, 0xf1, 0xbd, 0x1d, 0x01,
	0xb2, 0x25, 0x46, 0xcc, 0xc8, 0x3d, 0xee, 0xb3, 0x5e, 0x7d, 0xcd, 0x10, 0x33, 0xe2, 0x07, 0xb9,
	0x0c, 0x2d, 0x1e, 0x1e, 0xb3, 0xc0, 0xf1, 0xdc, 0x5e, 0x43, 0xf0, 0x64, 0x4f, 0xe3, 0xf7, 0xae,
	0x98, 0x73, 0x46, 0xa2, 0x4e, 0x98, 0x37, 0x3c, 0xe2, 0xbd, 0xa6, 0x90, 0xdf, 0xee, 0x20, 0xec,
	0x2b, 0x04, 0x59, 0x7f, 0x59, 0x87, 0x26, 0x2e, 0x42, 0x2e, 0x43, 0x23, 0xa0, 0x23, 0x86, 0x2c,
	0xb5, 0x37, 0x9b, 0x1f, 0x1d, 0x86, 0xee, 0x99, 0x8d, 0xa0, 0xc2, 0x12, 0xb5, 0xe2, 0x12, 0x6f,
	0x81, 0x9c, 0xce, 0xe9, 0x87, 0xe3, 0x80, 0xf7, 0xea, 0x88, 0x05, 0x04, 0x6d, 0x09, 0x48, 0xce,
	0x43, 0x38, 0x18, 0x24, 0x8c, 0x2b, 0x16, 0xe5, 0xa0, 0xcf, 0x10, 0x24, 0x48, 0x12, 0x54, 0x9c,
	0x23, 0x15, 0xd6, 0x44, 0xf1, 0x3a, 0x12, 0xf6, 0xa5, 0x00, 0x91, 0x2b, 0xd0, 0xf6, 0x02, 0xae,
	0xf0, 0x53, 0x6b, 0xc6, 0x9d, 0xba, 0xdd, 0xf2, 0x02, 0x2e, 0x91, 0x37, 0x60, 0xc6, 0x45, 0xb3,
	0x50, 0xf8, 0xe9, 0x35, 0xe3, 0x8e, 0x61, 0x77, 0x24, 0x4c, 0x92, 0x5c, 0x03, 0x70, 0x29, 0x4f,
	0x09, 0x5a, 0xb8, 0x40, 0x5b, 0x40, 0xb2, 0x19, 0x14, 0x07, 0x54, 0xec, 0x5d, 0xcf, 0xc4, 0x2d,
	0x53, 0x1c, 0xc8, 0xed, 0x54, 0x1c, 0x48, 0xfc, 0xfc, 0x5a, 0x5d, 0x71, 0x20, 0x91, 0x39, 0x07,
	0x12, 0x4f, 0x84, 0x41, 0xa6, 0x1c, 0x48, 0x92, 0x94, 0x03, 0x49, 0xb0, 0x80, 0x0b, 0x20, 0x07,
	0xd9, 0x0c, 0x85, 0xad, 0x5a, 0x9c, 0xdc, 0xaa, 0x9f, 0x18, 0xd0, 0x7c, 0x42, 0x79, 0xff, 0x08,
	0x0d, 0x41, 0x20, 0x52, 0xd3, 0xc2, 0x0f, 0xb1, 0x4b, 0x7d, 0x9f, 0x26, 0x49, 0xba, 0x4b, 0x6d,
	0x7b, 0x1a, 0xbf, 0x77, 0x5d, 0x72, 0x1d, 0x1a, 0x1e, 0x67, 0x23, 0xdc, 0x9e, 0xce, 0x06, 0x48,
	0xdb, 0x12, 0x66, 0x68, 0x23, 0x9c, 0xac, 0x41, 0xc7, 0x65, 0x49, 0x3f, 0xf6, 0x22, 0xee, 0x85,
	0x41, 0xaf, 0x21, 0x37, 0x40, 0x03, 0x29, 0x73, 0x95, 0x3b, 0x53, 0xf3, 0x5c, 0xeb, 0x73, 0x58,
	0xb0, 0xd9, 0x70, 0xec, 0xd3, 0xd8, 0xfb, 0x9a, 0xc5, 0x2f, 0x18, 0xe7, 0x5e, 0x30, 0x4c, 0x08,
	0xd1, 0x8d, 0x48, 0x59, 0x8f, 0x09, 0x75, 0x4e, 0xc7, 0xbd, 0x1a, 0xee, 0x8a, 0xf8, 0x57, 0xf0,
	0x3f, 0xa4, 0xa3, 0x11, 0x45, 0x43, 0x36, 0x6c, 0xf9, 0x61, 0xfd, 0x8b, 0x01, 0xf3, 0xda, 0x9c,
	0x5b, 0x61, 0x30, 0xf0, 0x86, 0x95, 0x33, 0x3e, 0x81, 0x06, 0x3f, 0x8b, 0x18, 0x4e, 0xd9, 0xdd,
	0x58, 0x92, 0xe2, 0x68, 0x43, 0x0f, 0xce, 0x22, 0xb6, 0xb9, 0x52, 0x02, 0x38, 0x5f, 0x04, 0xc7,
	0x41, 0x78, 0x12, 0xd8, 0x38, 0x96, 0x2c, 0xc3, 0x54, 0x1f, 0x57, 0x40, 0x26, 0x66, 0x6c, 0xf5,
	0x95, 0x72, 0x2b, 0x54, 0x50, 0x2b, 0x71, 0xdb, 0xd4, 0xb8, 0x15, 0x86, 0x2f, 0x47, 0x38, 0xbf,
	0x93, 0x84, 0x01, 0xda, 0x64, 0xdb, 0x06, 0x09, 0xfa, 0x8d, 0x24, 0x0c, 0xac, 0xff, 0x31, 0x60,
	0xe5, 0xc5, 0x28, 0x0c, 0xf9, 0xd1, 0x8b, 0x88, 0xc6, 0x09, 0x3b, 0x38, 0x62, 0x9c, 0x2a, 0xa1,
	0xae, 0x01, 0xf0, 0x30, 0xf2, 0xfa, 0x8e, 0x12, 0x0d, 0x8d, 0x01, 0x21, 0x9f, 0x0a, 0xf9, 0xae,
	0x01, 0x50, 0x3f, 0x3a, 0xa2, 0x8e, 0xc7, 0x59, 0x8c, 0x7b, 0x59, 0xb3, 0xdb, 0x08, 0xd9, 0xe5,
	0x2c, 0x26, 0x1f, 0x81, 0xc9, 0x63, 0x1a, 0x24, 0x83, 0x30, 0x1e, 0x39, 0x9a, 0x10, 0x9d, 0x54,
	0x15, 0x07, 0x29, 0x56, 0x2e, 0x67, 0xcf, 0xf1, 0x22, 0x40, 0x2c, 0x20, 0xf6, 0xdd, 0x91, 0xee,
	0xa4, 0x21, 0xd7, 0x17, 0x90, 0x03, 0x74, 0x29, 0x4f, 0x61, 0x49, 0xa2, 0x91, 0xc7, 0xd1, 0xd8,
	0xe7, 0x5e, 0xe4, 0x7b, 0x2c, 0x46, 0x07, 0xd2, 0xd9, 0x98, 0x97, 0xab, 0x68, 0xae, 0xd8, 0x5e,
	0xc0, 0xc1, 0x82, 0x7c, 0x2f, 0xa3, 0xb6, 0x7e, 0x6e, 0xc0, 0x92, 0xae, 0x81, 0xfd, 0x23, 0xef,
	0xf5, 0xe4, 0xbf, 0xc0, 0x92, 0xdf, 0x81, 0x39, 0xd7, 0xeb, 0x0b, 0x93, 0xa4, 0xf1, 0x99, 0x1c,
	0x2e, 0xbd, 0x61, 0x37, 0x07, 0xe3, 0x1c, 0x55, 0x4a, 0x6a, 0xbc, 0x89, 0x92, 0xac, 0xcf, 0x61,
	0x69, 0x9b, 0xf5, 0xc3, 0x38, 0x66, 0x3e, 0xe5, 0x61, 0xfc, 0x2d, 0x70, 0x6f, 0xf5, 0x60, 0x19,
	0xf5, 0xf3, 0x9c, 0x06, 0xc3, 0x31, 0x1d, 0xe6, 0x1a, 0xb1, 0xfe, 0xc8, 0x80, 0xab, 0xcf, 0xe9,
	0x21, 0xf3, 0x33, 0xab, 0xa5, 0x42, 0x9a, 0xef, 0x53, 0x65, 0xd6, 0xbf, 0xd5, 0xa0, 0xf7, 0x22,
	0x62, 0x7d, 0x6f, 0xe0, 0x31, 0xf7, 0x0d, 0xb7, 0xec, 0xdd, 0xc2, 0xfa, 0x22, 0x82, 0x74, 0x3f,
	0x72, 0xd9, 0x80, 0x8e, 0x7d, 0xee, 0x20, 0x22, 0xe7, 0x67, 0x1d, 0xc8, 0x88, 0x9e, 0x3a, 0xcc,
	0x67, 0x23, 0x16, 0xf0, 0x24, 0x8b, 0x1c, 0xc6, 0x9d, 0xe6, 0x66, 0x6d, 0x63, 0xdd, 0x36, 0x47,
	0xf4, 0xf4, 0xa9, 0x42, 0xca, 0x18, 0xf2, 0x08, 0x96, 0xa2, 0x38, 0x3c, 0xa4, 0x87, 0x9e, 0xef,
	0xf1, 0x33, 0x87, 0x1f, 0xc5, 0x2c, 0x39, 0x0a, 0x7d, 0x57, 0x9e, 0xd2, 0xcd, 0xc6, 0xfa, 0xbd,
	0x47, 0x8f, 0xec, 0x45, 0x8d, 0xe4, 0x20, 0xa5, 0x20, 0xcf, 0xa0, 0x31, 0x0a, 0x5d, 0x19, 0x53,
	0xba, 0x1b, 0xef, 0xca, 0xad, 0x3f, 0x4f, 0xc8, 0x7b, 0xf2, 0x7b, 0x2f, 0x74, 0xd9, 0xe6, 0x8c,
	0x3a, 0xb5, 0x42, 0xc2, 0xc4, 0xc6, 0x49, 0xac, 0x75, 0x80, 0x9c, 0x82, 0x98, 0x50, 0xa0, 0x31,
	0x2f, 0xe9, 0x90, 0x63, 0x16, 0x24, 0xa6, 0x61, 0xfd, 0x01, 0x5c, 0xde, 0x1d, 0x45, 0x71, 0xf8,
	0x92, 0x6d, 0x85, 0x47, 0x2c, 0x66, 0x41, 0xff, 0x7b, 0x3d, 0x05, 0xd6, 0x3f, 0x19, 0x60, 0xca,
	0x23, 0xb8, 0xcf, 0xdd, 0x13, 0xb5, 0xee, 0xb6, 0x72, 0x9f, 0x06, 0xea, 0xe4, 0x86, 0xd2, 0x49,
	0x89, 0x4a, 0x01, 0xd0, 0x95, 0xce, 0xee, 0x85, 0x2f, 0x45, 0x20, 0x7c, 0xc9, 0x62, 0x3a, 0x64,
	0xca, 0x81, 0xae, 0xc2, 0xd4, 0x89, 0x17, 0xb8, 0xe1, 0x49, 0xba, 0x75, 0xf7, 0xd7, 0x6d, 0x05,
	0x21, 0x6f, 0x41, 0xbb, 0xb8, 0x49, 0xc6, 0xa6, 0x71, 0xdf, 0xce, 0x61, 0xd6, 0x06, 0x40, 0x3e,
	0x3f, 0x99, 0x87, 0xe2, 0x0a, 0xa6, 0x91, 0x83, 0xf6, 0xe3, 0xd0, 0x1d, 0xf7, 0xb9, 0x59, 0xb3,
	0xbe, 0x86, 0xcb, 0xa8, 0xe9, 0x17, 0xcc, 0x67, 0x28, 0xe4, 0x1b, 0x78, 0x54, 0x4c, 0x53, 0x04,
	0x5a, 0x26, 0x00, 0xd2, 0xa5, 0xca, 0x11, 0x59, 0x82, 0xa0, 0xb9, 0xdc, 0x7a, 0xc9, 0xe5, 0x5a,
	0x63, 0x30, 0x9f, 0x08, 0xcc, 0x28, 0xf9, 0x5e, 0xb7, 0xef, 0x1b, 0x03, 0xae, 0x7e, 0xe2, 0xb1,
	0x98, 0xc6, 0xfd, 0xa3, 0x33, 0x34, 0x2d, 0x2f, 0x18, 0xbe, 0x81, 0xd8, 0x0f, 0x61, 0x25, 0xa2,
	0x31, 0x0b, 0xb8, 0x72, 0xe5, 0x51, 0x1c, 0x46, 0x61, 0x8c, 0x31, 0x5e, 0xaa, 0x60, 0x49, 0xa2,
	0x51, 0xaf, 0xfb, 0x19, 0xf2, 0x55, 0xda, 0xf8, 0x73, 0x03, 0xae, 0xa8, 0xad, 0x18, 0x8a, 0x63,
	0x2a, 0x5d, 0x55, 0x6e, 0x60, 0xef, 0xc3, 0xf2, 0x21, 0xed, 0x1f, 0x0f, 0xe3, 0x70, 0x1c, 0xb8,
	0x4e, 0xce, 0x60, 0xa2, 0x38, 0x5c, 0xcc, 0xb1, 0x07, 0x29, 0xaf, 0xc9, 0x85, 0x06, 0x75, 0x63,
	0xd2, 0xa0, 0xea, 0xeb, 0xf7, 0x3e, 0xd0, 0x4d, 0xea, 0x6f, 0x0c, 0x98, 0x2b, 0xf9, 0x74, 0xf2,
	0xb8, 0x60, 0xe9, 0x37, 0x2b, 0x1d, 0x7f, 0xfe, 0x8d, 0xb6, 0xde, 0xda, 0x0a, 0x83, 0x84, 0xd3,
	0x80, 0x2b, 0x33, 0x9f, 0x03, 0x23, 0x90, 0xb9, 0x8b, 0x30, 0x61, 0x23, 0x10, 0x00, 0x95, 0xb8,
	0x20, 0x80, 0x5a, 0x1f, 0xc2, 0x6c, 0x61, 0x0a, 0x32, 0x0b, 0xed, 0xe7, 0xe1, 0x90, 0xc6, 0x1e,
	0x3f, 0x1a, 0x99, 0x97, 0x48, 0x17, 0x60, 0x3f, 0xf4, 0xcf, 0x82, 0x70, 0xe4, 0x51, 0xdf, 0x34,
	0xc8, 0x0c, 0x64, 0x6b, 0x98, 0x35, 0xeb, 0xaf, 0x0d, 0xe8, 0xbc, 0xe8, 0x87, 0x31, 0xbb, 0x20,
	0xdf, 0x79, 0x58, 0xc8, 0x77, 0xe6, 0xd4, 0x81, 0x15, 0x83, 0x90, 0xe5, 0xf9, 0xec, 0xdf, 0xd7,
	0xcc, 0x71, 0xae, 0x01, 0x08, 0x7f, 0xe6, 0x4b, 0xab, 0x91, 0xd9, 0x5e, 0x1b, 0x21, 0xe9, 0x61,
	0xd1, 0x53, 0x9b, 0xe6, 0x44, 0x6a, 0xf3, 0x63, 0x03, 0xda, 0xb8, 0xe6, 0x36, 0xe5, 0xf4, 0x5b,
	0xe5, 0x98, 0x40, 0xc3, 0xa5, 0x9c, 0x2a, 0x7e, 0xf1, 0x7f, 0x91, 0x79, 0x8b, 0xbf, 0x92, 0x19,
	0xc9, 0x6c, 0x4b, 0x00, 0x90, 0x95, 0x07, 0x00, 0x38, 0x97, 0xcc, 0xa2, 0x6f, 0x41, 0x33, 0x11,
	0x5f, 0x68, 0x67, 0x9d, 0xc2, 0xba, 0x82, 0x55, 0x5b, 0x62, 0xad, 0xff, 0x36, 0x60, 0x69, 0x9f,
	0xc5, 0x91, 0xcf, 0x4e, 0x3d, 0x7e, 0xa6, 0x6b, 0xff, 0x8b, 0x54, 0x33, 0xc8, 0x7d, 0x1d, 0xb9,
	0x5f, 0x93, 0xb3, 0x54, 0x0e, 0xb8, 0x87, 0xe2, 0x2c, 0x7e, 0x11, 0x78, 0xc3, 0x98, 0x8e, 0xb6,
	0xc3, 0xfe, 0x58, 0x9c, 0x07, 0x11, 0x1e, 0x7c, 0xa5, 0x51, 0xb4, 0x88, 0x8a, 0x03, 0xdf, 0xa8,
	0xcc, 0x5a, 0x74, 0xa7, 0x31, 0x5d, 0xcc, 0x1d, 0x3e, 0x84, 0x06, 0xce, 0xd5, 0x83, 0xca, 0xe5,
	0xcc, 0x4b, 0x64, 0x15, 0x96, 0x15, 0x66, 0x2b, 0xf4, 0x95, 0x8f, 0x94, 0x38, 0xc3, 0x3a, 0x85,
	0xb9, 0x92, 0x00, 0x7a, 0x81, 0x8a, 0x79, 0x2d, 0x7e, 0x88, 0xfc, 0x37, 0xa6, 0x27, 0x69, 0xb6,
	0x1e, 0xd3, 0x13, 0x72, 0x1d, 0x20, 0x08, 0xe3, 0x11, 0xf5, 0x45, 0x26, 0xad, 0x52, 0x76, 0x0d,
	0x22, 0xac, 0xe9, 0x6b, 0x16, 0x87, 0xce, 0x49, 0x18, 0xbb, 0x09, 0xca, 0x55, 0xb7, 0xdb, 0x02,
	0xf2, 0x95, 0x00, 0x58, 0xb6, 0x48, 0x2a, 0x84, 0xe7, 0x12, 0x61, 0x99, 0x71, 0xaa, 0xab, 0x7b,
	0x05, 0xea, 0x2c, 0x4a, 0x70, 0xce, 0xda, 0x66, 0xf3, 0x3e, 0x7b, 0xef, 0xc1, 0xaf, 0xda, 0x02,
	0x52, 0xf2, 0x6b, 0x8d, 0x92, 0x5f, 0xb3, 0x02, 0x20, 0x93, 0x73, 0x9e, 0x23, 0xd0, 0x5b, 0xd0,
	0x41, 0xf6, 0x70, 0x74, 0x82, 0x82, 0xd5, 0x6d, 0xe4, 0x58, 0xc6, 0x6d, 0x59, 0x7a, 0x71, 0xea,
	0xa7, 0x14, 0x75, 0xa4, 0xe8, 0x20, 0x4c, 0x92, 0x58, 0xbf, 0x07, 0xcb, 0xe9, 0x7a, 0xfb, 0x47,
	0x5e, 0x85, 0x04, 0xc6, 0x84, 0x04, 0x6f, 0x90, 0x10, 0x15, 0x85, 0xad, 0x97, 0x85, 0xf5, 0xc1,
	0x2c, 0x2f, 0xfe, 0x4a, 0x51, 0x45, 0xfa, 0x51, 0x14, 0x55, 0x40, 0x74, 0x51, 0x91, 0xa2, 0x28,
	0xaa, 0x00, 0x59, 0x57, 0xe0, 0xb2, 0x28, 0x0c, 0x93, 0xfd, 0x38, 0xec, 0xb3, 0x24, 0x61, 0xae,
	0x26, 0xad, 0xf5, 0x57, 0x06, 0x2c, 0x54, 0x60, 0xc9, 0x8a, 0xce, 0x4e, 0x73, 0xd3, 0x58, 0x4f,
	0x39, 0xb2, 0xa0, 0x13, 0x8c, 0x47, 0xce, 0xa1, 0x28, 0x5b, 0x99, 0xe4, 0x08, 0xd1, 0x10, 0x8c,
	0x47, 0x4f, 0x24, 0x90, 0xbc, 0x5d, 0x2a, 0x7d, 0x95, 0x6f, 0x5d, 0x2f, 0x54, 0xbf, 0xe4, 0x21,
	0x2c, 0xeb, 0x54, 0x8e, 0x17, 0x38, 0x6c, 0x30, 0x60, 0x7d, 0x9e, 0xe6, 0x17, 0xeb, 0xf6, 0x82,
	0x46, 0xbf, 0x1b, 0x3c, 0x45, 0xac, 0xf5, 0x9f, 0x06, 0x2c, 0x1e, 0x84, 0x91, 0x94, 0x4e, 0xdf,
	0xb9, 0x1b, 0x20, 0x98, 0x48, 0x35, 0x61, 0x64, 0x21, 0xa7, 0x1d, 0x8c, 0x47, 0x4a, 0x5d, 0xdf,
	0xda, 0x1e, 0x92, 0x8f, 0xe0, 0x6a, 0x3f, 0x0c, 0xfb, 0xfd, 0x71, 0x8c, 0x39, 0xa0, 0x53, 0xed,
	0x0d, 0x56, 0x75, 0x9a, 0xed, 0xa2, 0x67, 0x50, 0x86, 0xd6, 0x2c, 0x1b, 0x9a, 0xf5, 0x4b, 0x03,
	0xba, 0x45, 0x01, 0x85, 0x1d, 0x08, 0xd1, 0x58, 0xc0, 0x63, 0x8f, 0x29, 0xd9, 0x50, 0xe5, 0x4f,
	0x25, 0xa4, 0xc4, 0x6d, 0xed, 0xdc, 0x6c, 0xc9, 0x0b, 0x5c, 0x76, 0x9a, 0x37, 0x75, 0x22, 0xaf,
	0xbf, 0x2b, 0x20, 0x79, 0x03, 0xa2, 0xa1, 0x37, 0x20, 0x96, 0x61, 0xaa, 0xd0, 0x68, 0x52, 0x5f,
	0xe4, 0x2a, 0xb4, 0xfb, 0x69, 0xf6, 0xdb, 0x9b, 0x92, 0xc9, 0x44, 0x06, 0x20, 0xbf, 0x02, 0xf3,
	0x54, 0xa6, 0x7d, 0x4e, 0x4e, 0x35, 0x8d, 0xe5, 0xb7, 0xa9, 0x10, 0x59, 0xee, 0x6c, 0x6d, 0xc2,
	0x8a, 0x3c, 0xf0, 0x81, 0x17, 0x45, 0x8c, 0xeb, 0xfb, 0xf9, 0x16, 0x88, 0x9d, 0x13, 0x19, 0xcb,
	0x48, 0x7a, 0x21, 0xb9, 0x9d, 0xad, 0x60, 0x3c, 0x42, 0x93, 0xb5, 0xbe, 0x84, 0xf9, 0x89, 0xb1,
	0x64, 0x05, 0xa6, 0xb1, 0xd4, 0xc5, 0x5e, 0x9c, 0x10, 0x73, 0x4a, 0x7c, 0xee, 0xba, 0xe4, 0x0e,
	0x4c, 0xa1, 0x09, 0x27, 0xaa, 0x21, 0x67, 0xaa, 0x86, 0x5c, 0xd6, 0x56, 0xb4, 0x15, 0xde, 0xfa,
	0xc3, 0x1a, 0x2c, 0xa3, 0x9f, 0x78, 0xc6, 0xe2, 0x80, 0xf9, 0xdf, 0xaf, 0x77, 0x20, 0x8f, 0x61,
	0x55, 0xaf, 0x8d, 0x46, 0x62, 0xd2, 0x8a, 0x54, 0xe9, 0xbe, 0xdd, 0xd3, 0xc8, 0xf6, 0x68, 0x92,
	0xe4, 0x35, 0xd2, 0xab, 0x8c, 0xb3, 0xf9, 0x2a, 0xe3, 0xb4, 0xfe, 0xbe, 0x0e, 0x66, 0x59, 0x05,
	0xc2, 0x8a, 0x8e, 0xf1, 0xd3, 0x49, 0xbc, 0xaf, 0x55, 0x93, 0xd6, 0x06, 0x09, 0x7a, 0xe1, 0x7d,
	0xcd, 0xc8, 0x4d, 0x98, 0x55, 0x04, 0xd1, 0x38, 0xf6, 0xf8, 0x19, 0x6a, 0xda, 0xb0, 0x67, 0x24,
	0x70, 0x1f, 0x61, 0x22, 0x74, 0x2a, 0xa2, 0x7e, 0x18, 0xf0, 0x98, 0x26, 0xb2, 0xc9, 0x68, 0xd8,
	0x5d, 0x09, 0xde, 0x52, 0x50, 0x72, 0x0f, 0x16, 0x52, 0x3b, 0xd2, 0x97, 0x45, 0x0d, 0xd8, 0xa9,
	0x89, 0x3d, 0xcb, 0x57, 0xdf, 0x80, 0xa5, 0x12, 0xbd, 0xe2, 0x42, 0xb6, 0x79, 0x16, 0x0a, 0x23,
	0x14, 0x33, 0x0f, 0x61, 0xa5, 0x34, 0x26, 0x63, 0x6a, 0x0a, 0x47, 0x2d, 0x15, 0x46, 0x65, 0xbc,
	0x15, 0x4e, 0xc0, 0x34, 0xb2, 0xff, 0xaa, 0x13, 0xd0, 0xaa, 0x3e, 0x01, 0xe4, 0x61, 0xa6, 0x34,
	0xe5, 0xb9, 0xda, 0x7a, 0x4f, 0x46, 0x6b, 0x40, 0xa7, 0x7a, 0x54, 0xbe, 0xac, 0x68, 0x46, 0x50,
	0x0e, 0x32, 0xbf, 0x0f, 0x2b, 0xb2, 0x7d, 0x43, 0x93, 0xe4, 0xfb, 0x0f, 0x71, 0x3f, 0x36, 0x60,
	0x7e, 0x62, 0xf9, 0x73, 0x82, 0xdc, 0xeb, 0xfa, 0xae, 0x58, 0x54, 0x25, 0xca, 0x56, 0xe4, 0x08,
	0x5b, 0x40, 0xf2, 0xf1, 0xe2, 0xa8, 0xa0, 0x03, 0x33, 0xd4, 0x78, 0xb1, 0xb8, 0x88, 0x7f, 0x5b,
	0x82, 0xe9, 0xfd, 0x98, 0xf5, 0xbd, 0xc4, 0x0b, 0x03, 0x3d, 0xfe, 0x7d, 0x05, 0x0b, 0x15, 0xc8,
	0x73, 0x18, 0x5d, 0x84, 0x26, 0x8b, 0xe3, 0x30, 0x56, 0xb9, 0x94, 0xfc, 0x90, 0xae, 0x93, 0x53,
	0x3f, 0xed, 0x7d, 0xe2, 0x87, 0xb5, 0x22, 0x12, 0x52, 0x7a, 0xbc, 0xc7, 0x46, 0x61, 0xac, 0xe7,
	0x97, 0xd6, 0x3b, 0x22, 0x6f, 0x2b, 0x20, 0x8a, 0xab, 0xd5, 0xd3, 0x8b, 0x85, 0x7f, 0x34, 0x60,
	0xed, 0x89, 0x56, 0x56, 0x89, 0x4d, 0x47, 0x81, 0xf5, 0xad, 0xfc, 0x01, 0xcc, 0xb9, 0xcc, 0xe7,
	0x54, 0xf3, 0x10, 0x72, 0x5b, 0xb1, 0x98, 0xea, 0x22, 0x2e, 0xf7, 0x0b, 0xb7, 0xa0, 0x93, 0xd0,
	0x97, 0x4c, 0x4f, 0x27, 0x5a, 0x9b, 0x0d, 0x1e, 0x8f, 0x99, 0x0d, 0x02, 0x91, 0x25, 0x15, 0x6d,
	0xd7, 0x8b, 0x59, 0x9f, 0x3b, 0xc7, 0x52, 0xaa, 0x94, 0xa8, 0x25, 0xc1, 0xcf, 0xfc, 0x82, 0xa5,
	0x34, 0x2e, 0xb4, 0x14, 0xeb, 0x13, 0x58, 0x3d, 0x5f, 0x8c, 0xa2, 0xec, 0x35, 0x4d, 0xd3, 0x32,
	0x1c, 0xd5, 0xb4, 0x70, 0x64, 0xfd, 0x45, 0x0d, 0x40, 0x1a, 0x95, 0xc8, 0x81, 0xc9, 0x6a, 0xe1,
	0x7e, 0x63, 0xea, 0x23, 0xcc, 0xce, 0x55, 0xb9, 0x72, 0x2d, 0xcd, 0x05, 0xb2, 0x14, 0xb1, 0xa9,
	0xf2, 0x00, 0xcc, 0x10, 0x5f, 0xe1, 0x82, 0xab, 0xa3, 0xe1, 0x07, 0x30, 0xab, 0x27, 0x2c, 0x89,
	0x6a, 0x9e, 0x4e, 0xc6, 0x91, 0x19, 0x2d, 0x6d, 0x49, 0x0a, 0x15, 0xc0, 0x54, 0xb1, 0x6d, 0xf0,
	0x40, 0xcc, 0xa8, 0xc2, 0xb2, 0xd7, 0x67, 0x49, 0xaf, 0x85, 0x33, 0x76, 0x55, 0x3b, 0x3f, 0xc8,
	0xe7, 0x93, 0x81, 0x5a, 0xd0, 0xa4, 0xa2, 0xa9, 0x58, 0xd6, 0x96, 0xd9, 0x79, 0x30, 0x1e, 0x7d,
	0x29, 0x83, 0xd7, 0x4f, 0x6b, 0xd0, 0xc1, 0xa8, 0xb8, 0x47, 0x79, 0xec, 0x9d, 0xea, 0xf1, 0xb0,
	0x56, 0x88, 0x87, 0x0f, 0x60, 0x06, 0x11, 0xa9, 0x34, 0xf5, 0x73, 0xa4, 0xe9, 0x08, 0xaa, 0x54,
	0x98, 0x8b, 0xd3, 0xf8, 0x92, 0xda, 0x9b, 0x15, 0x6a, 0xd7, 0xba, 0xd4, 0x53, 0xe5, 0x2e, 0xf5,
	0x84, 0x3a, 0xa6, 0xdf, 0x58, 0x1d, 0xad, 0xb2, 0x3a, 0xfe, 0xbd, 0x01, 0xcb, 0x79, 0xf1, 0xb4,
	0x4f, 0xe3, 0x24, 0xbb, 0x88, 0x38, 0x80, 0x29, 0x51, 0xe1, 0x53, 0xae, 0xba, 0x09, 0xef, 0xc9,
	0x75, 0xaa, 0xa9, 0x35, 0xf0, 0x0e, 0x0e, 0xda, 0x9c, 0x7d, 0x42, 0x87, 0x9f, 0x0d, 0xb0, 0x24,
	0xfa, 0xa2, 0xef, 0xd9, 0x6a, 0x2e, 0x72, 0x17, 0xe6, 0xdd, 0xb0, 0x2f, 0x4a, 0x27, 0x67, 0xe0,
	0xf9, 0xcc, 0x89, 0x28, 0x3f, 0x92, 0xce, 0xd4, 0x9e, 0x53, 0x88, 0x1d, 0xcf, 0x67, 0xfb, 0x94,
	0x1f, 0x91, 0xdb, 0x30, 0xf7, 0x32, 0xec, 0xd3, 0x43, 0x8d, 0x52, 0xb6, 0x8d, 0x66, 0x11, 0x9c,
	0xd1, 0xdd, 0x84, 0x59, 0x4e, 0xe3, 0x21, 0xe3, 0xce, 0x20, 0xf4, 0x5d, 0x16, 0xab, 0xec, 0x72,
	0x46, 0x02, 0x77, 0x10, 0x46, 0x1e, 0xc0, 0x42, 0x96, 0x2e, 0x39, 0x11, 0x8b, 0x65, 0x8e, 0x2e,
	0x37, 0x61, 0xb3, 0x71, 0x7f, 0x7d, 0x7d, 0xdd, 0x36, 0xd3, 0xd4, 0x69, 0x9f, 0xc5, 0xf2, 0xe2,
	0xe9, 0xd7, 0x61, 0x65, 0x9c, 0x30, 0x67, 0x1c, 0x88, 0x54, 0xe3, 0x90, 0x26, 0xcc, 0xcd, 0x94,
	0x3f, 0xa5, 0x1d, 0xfc, 0xc5, 0x71, 0xc2, 0xbe, 0x10, 0x34, 0x4f, 0x04, 0x49, 0xaa, 0xfa, 0x3d,
	0x68, 0x0b, 0x33, 0x90, 0xa5, 0xf5, 0x34, 0xea, 0xf0, 0xee, 0x85, 0x3a, 0xc4, 0x35, 0x85, 0xa1,
	0x60, 0x91, 0xdd, 0xf8, 0x78, 0xec, 0xb9, 0x76, 0x2b, 0x50, 0xdf, 0x69, 0x92, 0x2b, 0x3c, 0x19,
	0x75, 0xe5, 0x56, 0xca, 0x24, 0xf7, 0x40, 0x42, 0x0a, 0x27, 0xa9, 0x5d, 0xac, 0xa5, 0x77, 0xc1,
	0x2c, 0x6f, 0x10, 0x99, 0x87, 0xe2, 0x16, 0xc9, 0x7e, 0xae, 0x3c, 0x16, 0x7b, 0x34, 0x3e, 0x66,
	0xdc, 0x34, 0x04, 0xe4, 0xcb, 0xf0, 0x24, 0xa2, 0xfe, 0x57, 0xf4, 0xf0, 0xd0, 0xe3, 0x66, 0xcd,
	0xba, 0x29, 0x86, 0x69, 0x7c, 0x92, 0x16, 0x20, 0xa7, 0xe6, 0x25, 0xf1, 0xdf, 0x56, 0xe8, 0x32,
	0xd3, 0xb0, 0xfe, 0xd9, 0x80, 0xc5, 0xb2, 0x90, 0xbb, 0xc1, 0x20, 0x24, 0x57, 0xf4, 0xa4, 0x55,
	0xfa, 0xf3, 0x2c, 0x61, 0x4d, 0x25, 0xd4, 0x8b, 0xa7, 0x7a, 0xa1, 0x72, 0x2a, 0xb6, 0x15, 0x30,
	0xdd, 0x91, 0x15, 0x9d, 0xd6, 0x56, 0xc0, 0x5c, 0xe7, 0x5a, 0xa1, 0xd6, 0x69, 0x64, 0x56, 0xaf,
	0x3c, 0xf8, 0x0f, 0x80, 0x68, 0x65, 0x61, 0x7e, 0x5b, 0x8c, 0x19, 0x48, 0x5e, 0x1c, 0xaa, 0x7b,
	0xc8, 0x6f, 0x44, 0x11, 0x18, 0x78, 0xdc, 0xc3, 0xfa, 0x1f, 0x9d, 0xeb, 0xe3, 0x78, 0x98, 0x94,
	0xba, 0x4a, 0x46, 0xb9, 0xab, 0x54, 0xd1, 0x03, 0xa9, 0x55, 0xf6, 0x40, 0x5e, 0xe1, 0x34, 0x96,
	0xa1, 0x91, 0x30, 0xe6, 0x2a, 0x4b, 0xad, 0xbd, 0x77, 0xdf, 0xc6, 0x6f, 0xeb, 0x27, 0x75, 0xe8,
	0xe6, 0x69, 0xe9, 0xb9, 0x9d, 0xa9, 0xca, 0x58, 0x51, 0xb0, 0x95, 0x7a, 0xd1, 0xeb, 0x66, 0x37,
	0xdc, 0x32, 0xf0, 0x34, 0xd2, 0xd6, 0xf1, 0x31, 0x0b, 0x64, 0xeb, 0x38, 0xbb, 0x1d, 0xe7, 0x03,
	0x55, 0xf8, 0xc8, 0xdb, 0xf1, 0x83, 0x41, 0x8e, 0x72, 0x07, 0xaa, 0xf0, 0x91, 0xa8, 0xed, 0x01,
	0xb9, 0x03, 0xa6, 0x48, 0xa8, 0x9d, 0x81, 0x17, 0x27, 0x5c, 0x15, 0x5a, 0xd3, 0xe8, 0x71, 0xbb,
	0x02, 0xbe, 0x23, 0xc0, 0xb2, 0xd8, 0xba, 0x0b, 0xf3, 0x48, 0x99, 0xb0, 0x7e, 0x18, 0xb8, 0x8a,
	0xb4, 0x85, 0xa4, 0x73, 0x02, 0xf1, 0x02, 0xe1, 0x92, 0xf6, 0x1a, 0x00, 0xd2, 0x4a, 0x5e, 0xdb,
	0x69, 0xad, 0x15, 0xaa, 0x2e, 0xf7, 0x07, 0xb0, 0x92, 0x1f, 0x7a, 0x2f, 0x70, 0xfa, 0x99, 0x4d,
	0xf6, 0x00, 0x8d, 0x62, 0x31, 0x35, 0xbe, 0xdd, 0x20, 0xb7, 0x57, 0x11, 0x14, 0x70, 0x56, 0x3e,
	0xe8, 0x75, 0x64, 0x65, 0x27, 0x3e, 0x0f, 0x06, 0x19, 0xc2, 0x1d, 0xf4, 0x66, 0x72, 0xc4, 0xf6,
	0xc0, 0xfa, 0x45, 0x0d, 0x16, 0x77, 0x3c, 0x9f, 0xb3, 0x38, 0xdf, 0x12, 0x34, 0x92, 0x0a, 0x2b,
	0x30, 0x2a, 0xad, 0xe0, 0x7d, 0x58, 0xd6, 0x08, 0x95, 0x3f, 0xd3, 0xac, 0x66, 0x31, 0xc7, 0x1e,
	0x20, 0x72, 0xa2, 0x7f, 0x26, 0x7d, 0x63, 0xb6, 0x8f, 0x4b, 0x30, 0x35, 0xf2, 0x70, 0x27, 0xe4,
	0xdd, 0x6e, 0x73, 0xe4, 0x89, 0x7d, 0x10, 0x60, 0x7a, 0x2a, 0xc0, 0x4d, 0x05, 0xa6, 0xa7, 0xdb,
	0x03, 0x72, 0x1d, 0x3a, 0x92, 0x5a, 0xe4, 0x91, 0xf2, 0xc9, 0x41, 0xcd, 0x6e, 0xe3, 0x10, 0x9b,
	0x72, 0x86, 0x78, 0x1c, 0x26, 0xf1, 0xd3, 0x0a, 0x2f, 0xc6, 0x22, 0x5e, 0xad, 0xc6, 0x07, 0x2a,
	0x91, 0x17, 0xab, 0x1d, 0x64, 0xab, 0xf1, 0x01, 0x46, 0x62, 0xb9, 0xda, 0xc1, 0x40, 0xd4, 0x2e,
	0x38, 0x5b, 0xe9, 0x30, 0xcb, 0x3d, 0x99, 0x17, 0xb3, 0x16, 0xce, 0xb3, 0xf5, 0xb3, 0x1a, 0x2c,
	0x7e, 0x4c, 0xf9, 0xd1, 0x84, 0x7a, 0xcf, 0xd7, 0x9a, 0x71, 0x81, 0xd6, 0xd2, 0x0e, 0xab, 0x16,
	0x7c, 0xb0, 0xc3, 0x8a, 0xd1, 0xe4, 0x6d, 0xe8, 0x2a, 0x43, 0x2d, 0x06, 0x9d, 0x19, 0x69, 0xa6,
	0xe7, 0xc7, 0xa6, 0x46, 0x55, 0x6c, 0x7a, 0x04, 0x4b, 0xc9, 0xd9, 0x68, 0xc4, 0x78, 0xec, 0xf5,
	0x9d, 0xdc, 0x54, 0x65, 0xf4, 0x6f, 0x6d, 0x36, 0x07, 0xd4, 0x4f, 0x98, 0xbd, 0x90, 0xd1, 0x6c,
	0xa5, 0xb6, 0x8b, 0xfe, 0x05, 0x5d, 0xa1, 0x9c, 0x5d, 0xa5, 0x03, 0x08, 0x11, 0x33, 0x5b, 0x1f,
	0xc2, 0xfc, 0xc7, 0x8c, 0xff, 0x1f, 0xcd, 0xcd, 0xfa, 0xa6, 0x86, 0xc3, 0xf3, 0x7c, 0xf1, 0x75,
	0x5c, 0xda, 0x2b, 0x4a, 0x91, 0xcc, 0xd5, 0xd4, 0xcf, 0x73, 0x35, 0x8d, 0xa2, 0xab, 0xb9, 0x0b,
	0xf3, 0x22, 0xbc, 0x26, 0x78, 0x87, 0xe8, 0xa8, 0x6c, 0x03, 0x15, 0x63, 0xcf, 0x8d, 0x13, 0x26,
	0xef, 0x16, 0x55, 0xb8, 0x52, 0x55, 0xd9, 0xd4, 0x44, 0x55, 0xf6, 0x0c, 0x66, 0x47, 0x18, 0xb4,
	0x1c, 0x9f, 0x9e, 0x85, 0x63, 0x8e, 0x06, 0xd8, 0xdd, 0x20, 0x32, 0xd4, 0xca, 0x78, 0xf6, 0x1c,
	0x31, 0x9b, 0x44, 0xff, 0x72, 0xb6, 0x59, 0x90, 0x30, 0x7b, 0x66, 0xa4, 0xc1, 0x44, 0x55, 0x41,
	0x84, 0x5a, 0xf2, 0x0c, 0x31, 0xd5, 0xcb, 0x45, 0x09, 0x71, 0xa5, 0x1c, 0x53, 0x17, 0xca, 0x31,
	0xfd, 0xdd, 0xca, 0xb1, 0x81, 0xbb, 0x8b, 0x35, 0x04, 0x5a, 0x53, 0x2a, 0x05, 0xde, 0x07, 0xe8,
	0x6e, 0xa5, 0x8d, 0x10, 0x34, 0x09, 0x6d, 0x0c, 0x66, 0x92, 0xaf, 0x33, 0x66, 0x0f, 0xe6, 0x9e,
	0x9e, 0x46, 0x61, 0xcc, 0x73, 0x1b, 0xba, 0x02, 0x6d, 0x3c, 0x13, 0x9a, 0x09, 0xb5, 0x04, 0x20,
	0xb5, 0x20, 0xcd, 0xc0, 0x6a, 0x25, 0x03, 0x13, 0xd3, 0xed, 0x8e, 0xbe, 0xbd, 0xe9, 0xd6, 0x61,
	0xee, 0x31, 0xe7, 0xb4, 0x7f, 0xf4, 0xba, 0x16, 0x6e, 0xfd, 0x5d, 0x13, 0x88, 0xea, 0xf5, 0xaa,
	0xa4, 0x03, 0x47, 0xdd, 0x86, 0xb9, 0xe0, 0x84, 0x57, 0xf8, 0x97, 0xd9, 0xe0, 0x84, 0x6b, 0x8e,
	0xe5, 0x16, 0x74, 0xe5, 0x91, 0x15, 0x1c, 0x6a, 0x87, 0x64, 0x16, 0xa1, 0x3b, 0x0a, 0x28, 0xa6,
	0x8b, 0x4e, 0xb8, 0x93, 0x84, 0xe3, 0xb8, 0xcf, 0xf4, 0xfb, 0xd0, 0xd9, 0xe8, 0x84, 0xbf, 0x40,
	0x28, 0x4e, 0xb7, 0x21, 0x73, 0x56, 0x57, 0xdd, 0x7b, 0x38, 0x11, 0x4d, 0x12, 0xa6, 0x37, 0xfb,
	0xe6, 0x83, 0x71, 0x76, 0x2b, 0xb2, 0x8f, 0x48, 0xf2, 0x2e, 0x98, 0x71, 0xfe, 0x10, 0x48, 0x4e,
	0x2e, 0x7d, 0xc7, 0x9c, 0x06, 0x4f, 0x33, 0x14, 0x9d, 0x94, 0xd3, 0xb1, 0xea, 0xd5, 0x74, 0x35,
	0xf0, 0x01, 0x1d, 0x17, 0x8e, 0x70, 0xab, 0x78, 0x84, 0x6f, 0xc0, 0x8c, 0x44, 0xa9, 0x24, 0x4a,
	0x86, 0xe0, 0x0e, 0xc2, 0x54, 0x27, 0xfb, 0x36, 0x74, 0x62, 0x26, 0xce, 0x07, 0x17, 0xa7, 0x0a,
	0x9d, 0x7c, 0xe6, 0xf8, 0x00, 0x31, 0x78, 0xdc, 0xc8, 0xdb, 0xd0, 0x09, 0x23, 0x91, 0xc3, 0xc7,
	0x0e, 0x7d, 0x79, 0xda, 0xeb, 0x68, 0x09, 0x76, 0x3b, 0x8c, 0xf8, 0x4e, 0x18, 0x3f, 0x7e, 0x79,
	0x4a, 0x7e, 0x13, 0xe6, 0x71, 0x1e, 0x47, 0x1d, 0x16, 0xcc, 0xae, 0xbb, 0xfa, 0xc3, 0x28, 0xed,
	0xf0, 0x62, 0x22, 0xbd, 0x54, 0x02, 0x38, 0x5b, 0xb4, 0x7f, 0xc4, 0xec, 0x39, 0x5e, 0x04, 0x0b,
	0x51, 0xe4, 0xe6, 0x29, 0x51, 0xe6, 0xa4, 0x28, 0x08, 0x53, 0xa2, 0xdc, 0x01, 0x33, 0x8a, 0x99,
	0x70, 0xa5, 0x4e, 0xa6, 0x90, 0x79, 0xe9, 0x5f, 0x15, 0x7c, 0x2b, 0xd3, 0x4b, 0x53, 0x16, 0x18,
	0x44, 0x7f, 0xde, 0x88, 0x36, 0x65, 0x4b, 0x0c, 0xf9, 0x21, 0x98, 0x42, 0x2b, 0x31, 0x0d, 0xdc,
	0x70, 0xa4, 0x94, 0xb3, 0xa0, 0x2b, 0xa7, 0x3b, 0x4e, 0x98, 0x8d, 0x58, 0xa9, 0xa0, 0xa2, 0x17,
	0x5a, 0x9c, 0x6c, 0x69, 0x2d, 0x16, 0x4d, 0xd7, 0x66, 0xc9, 0xd8, 0xe7, 0xe4, 0x5e, 0x7a, 0x84,
	0xf1, 0xa6, 0xf1, 0x9c, 0x9b, 0x42, 0x79, 0xa6, 0x31, 0x8b, 0x7c, 0x1f, 0x66, 0x74, 0x0d, 0xe3,
	0xb1, 0xca, 0x1a, 0x6e, 0x9a, 0x2e, 0xed, 0x8e, 0xa6, 0x41, 0xeb, 0x5f, 0x0d, 0xe8, 0xee, 0xb1,
	0x78, 0xa8, 0x25, 0xc8, 0xaf, 0x7b, 0x6a, 0x14, 0x9d, 0x7e, 0x1c, 0xd4, 0xb1, 0x09, 0x0a, 0xc7,
	0xe1, 0x26, 0xcc, 0x2a, 0x9a, 0xec, 0xe6, 0x44, 0xec, 0xd0, 0x8c, 0x04, 0xaa, 0x2d, 0x7a, 0x45,
	0x36, 0x5d, 0x11, 0x20, 0x9b, 0x95, 0x01, 0xf2, 0x3f, 0x0c, 0xfd, 0xc5, 0x5f, 0x41, 0xa8, 0xb8,
	0x5a, 0xa8, 0xb8, 0x2c, 0x54, 0x34, 0x21, 0x54, 0xc5, 0x19, 0xaf, 0x10, 0xbe, 0x9e, 0x29, 0x49,
	0xa3, 0x7b, 0x0e, 0x8b, 0xfa, 0x61, 0x4d, 0xd4, 0x0b, 0x44, 0x94, 0xb0, 0xb3, 0x71, 0x79, 0xe2,
	0x4d, 0x60, 0xfa, 0x44, 0xd1, 0x5e, 0x88, 0x27, 0x81, 0xd6, 0x4f, 0x0d, 0x20, 0x9f, 0xa6, 0x57,
	0x9a, 0x05, 0xe1, 0xa2, 0x6a, 0xe1, 0xa2, 0x57, 0xef, 0x58, 0x05, 0xd3, 0x4a, 0x59, 0x15, 0xc2,
	0xc5, 0x3a, 0x9d, 0xf5, 0xdb, 0xb0, 0x28, 0xfd, 0x7e, 0x29, 0x9d, 0xb9, 0xd0, 0xf9, 0xbf, 0x6e,
	0x81, 0x25, 0x66, 0x97, 0x41, 0xea, 0x3b, 0x99, 0xfd, 0x3a, 0x5c, 0xdd, 0x1e, 0x47, 0xbe, 0xd7,
	0xa7, 0x9c, 0xed, 0xd1, 0x84, 0x8b, 0x72, 0x7e, 0x14, 0x85, 0x01, 0x0b, 0xb8, 0x58, 0xc5, 0xba,
	0x0a, 0xab, 0x1f, 0x33, 0x5e, 0xc2, 0x88, 0x62, 0x18, 0xb1, 0x7f, 0xdb, 0x82, 0x85, 0x0a, 0x1c,
	0xf9, 0x61, 0xf6, 0x94, 0x41, 0x1e, 0xbf, 0x95, 0x34, 0x0d, 0x10, 0xa4, 0xb8, 0x61, 0xea, 0x19,
	0x5f, 0xfa, 0xc6, 0xe1, 0x99, 0xf0, 0xb2, 0xd9, 0x46, 0xab, 0x76, 0xd5, 0xbb, 0xfa, 0xa8, 0xc2,
	0x02, 0xba, 0xa9, 0x88, 0x6f, 0x5b, 0x1f, 0x4d, 0x1e, 0xa5, 0xef, 0x0a, 0xa4, 0x75, 0xdd, 0x3c,
	0x7f, 0x1a, 0xf4, 0x20, 0x38, 0x81, 0x1c, 0x41, 0x3e, 0x01, 0xc8, 0x15, 0xa4, 0x7a, 0x80, 0x77,
	0xce, 0x1f, 0x9f, 0x6f, 0x09, 0x4e, 0xa2, 0x8d, 0x15, 0x4c, 0x60, 0x60, 0xc6, 0xf0, 0x75, 0x21,
	0x13, 0xa8, 0x0f, 0xc9, 0x04, 0x8e, 0x20, 0xbb, 0xd0, 0xe9, 0x0b, 0x27, 0x8f, 0x57, 0x82, 0x67,
	0xaa, 0x51, 0x76, 0x01, 0x17, 0x18, 0x11, 0x9e, 0x0a, 0x5a, 0xc9, 0x45, 0x3f, 0xfb, 0x26, 0xeb,
	0xb0, 0x18, 0x49, 0xaf, 0x1a, 0xc6, 0xce, 0xef, 0x8e, 0xd9, 0x98, 0xc9, 0x5a, 0xa5, 0x8d, 0xfd,
	0x17, 0x92, 0xe1, 0x3e, 0x17, 0x28, 0x6c, 0x3e, 0x3c, 0x4a, 0x5d, 0x3f, 0xbc, 0x8a, 0x6f, 0xf4,
	0xd3, 0x92, 0x6f, 0x19, 0x12, 0x6e, 0x41, 0x57, 0x04, 0xfc, 0x6c, 0xd2, 0x04, 0xa3, 0x60, 0xd3,
	0x9e, 0x0d, 0xc6, 0xa3, 0xfd, 0x0c, 0xb8, 0xfa, 0x08, 0xe6, 0x4a, 0xdb, 0x57, 0x59, 0xfa, 0x13,
	0xed, 0x51, 0x4a, 0x5b, 0x3e, 0x38, 0x59, 0x7d, 0xa0, 0x5e, 0xb2, 0xbc, 0xd1, 0xa0, 0x43, 0xbd,
	0xd3, 0x70, 0xee, 0xc8, 0xd2, 0x2d, 0x6c, 0xde, 0xbe, 0x49, 0x6f, 0x61, 0xaf, 0x40, 0xfb, 0xf0,
	0x8c, 0x33, 0xbd, 0x71, 0xd3, 0x12, 0x00, 0xa1, 0xb5, 0xd5, 0xdf, 0x82, 0x76, 0xa6, 0x8e, 0xca,
	0xe9, 0x0b, 0xad, 0x23, 0xd9, 0xb2, 0xce, 0x5b, 0x47, 0xc5, 0x86, 0x4f, 0x5d, 0xeb, 0xac, 0x0a,
	0xc0, 0xea, 0x9f, 0x1a, 0xd0, 0xce, 0x8c, 0xe4, 0x75, 0xc5, 0x2e, 0xb5, 0x6b, 0xeb, 0x15, 0xed,
	0xda, 0x52, 0x93, 0x49, 0x5f, 0xb3, 0x28, 0x6d, 0xb3, 0x24, 0xed, 0x8f, 0xa0, 0x5b, 0xb4, 0x39,
	0x62, 0x42, 0xfd, 0x98, 0x9d, 0x29, 0x9e, 0xc4, 0xbf, 0xc5, 0x09, 0x94, 0xc0, 0xe9, 0x04, 0xd6,
	0x43, 0x98, 0x97, 0x1e, 0x53, 0x4f, 0x53, 0xb3, 0xa4, 0xa3, 0x7e, 0x5e, 0xd2, 0x61, 0x3d, 0x03,
	0xf2, 0xf8, 0x84, 0x7a, 0xfc, 0xb3, 0x88, 0xe1, 0x85, 0x51, 0x80, 0x03, 0x3f, 0x80, 0x45, 0xee,
	0x8d, 0x98, 0xa8, 0x26, 0x46, 0x9e, 0xef, 0x7b, 0xb2, 0xf5, 0x92, 0xbd, 0x12, 0x78, 0xef, 0xbe,
	0xbd, 0xa0, 0xf0, 0x7b, 0x1a, 0xda, 0xfa, 0x87, 0x06, 0xcc, 0x4f, 0x78, 0xa4, 0xff, 0xc7, 0x3b,
	0xc1, 0x72, 0x32, 0x59, 0x9f, 0x4c, 0x26, 0xdf, 0x87, 0x19, 0x99, 0xcc, 0x64, 0x4f, 0x9c, 0xf5,
	0xdb, 0xc0, 0xfc, 0xea, 0xc7, 0xee, 0x24, 0xda, 0x3d, 0xd0, 0x0e, 0x10, 0x3d, 0x78, 0xaa, 0xb1,
	0xd2, 0x39, 0xad, 0x4c, 0x84, 0x4e, 0x35, 0xc3, 0x7c, 0x3c, 0xf1, 0x38, 0x7f, 0xf2, 0x7c, 0x4e,
	0x55, 0x9c, 0x4f, 0x72, 0x1d, 0x5a, 0x22, 0x8c, 0xa2, 0xfc, 0xd3, 0x78, 0xfd, 0x52, 0x8f, 0x4e,
	0xb8, 0x3d, 0x1d, 0x9d, 0xc8, 0xf0, 0x79, 0x1d, 0x5a, 0x41, 0x8a, 0x6f, 0x49, 0x7c, 0x20, 0xf0,
	0x81, 0xc2, 0xdf, 0xab, 0xce, 0xfb, 0xa5, 0xcb, 0xa9, 0xc8, 0xf9, 0xbf, 0xdd, 0x0c, 0xfb, 0xb6,
	0x88, 0x7c, 0xc9, 0xb1, 0x23, 0x3d, 0x28, 0x36, 0x1f, 0x66, 0x65, 0xd0, 0x16, 0x60, 0x34, 0x5b,
	0xd5, 0x02, 0x51, 0x4e, 0x56, 0xae, 0x3a, 0x57, 0x58, 0x15, 0x31, 0x72, 0xd5, 0x2b, 0xd0, 0x8a,
	0xb8, 0x2b, 0xa5, 0x35, 0x51, 0xda, 0x4b, 0xf6, 0x74, 0xc4, 0x5d, 0x79, 0x93, 0x6e, 0xc0, 0xe5,
	0x1d, 0x8f, 0x7f, 0x36, 0x18, 0xf8, 0x5e, 0xc0, 0x34, 0x63, 0x42, 0xbb, 0x9c, 0xac, 0xa7, 0x8c,
	0xaa, 0x7a, 0xaa, 0x9c, 0xb9, 0xd7, 0x26, 0x33, 0xf7, 0x0f, 0x60, 0x49, 0xa8, 0x34, 0x6f, 0x00,
	0xa6, 0x4a, 0x95, 0x6f, 0x2f, 0x8d, 0xfb, 0xb6, 0x50, 0xb9, 0xde, 0xb3, 0x46, 0xcd, 0x66, 0x33,
	0x17, 0x6e, 0x16, 0xe4, 0xcc, 0xf2, 0x62, 0xc1, 0xfa, 0xa5, 0x01, 0x3d, 0x21, 0x41, 0xf0, 0xdd,
	0x0a, 0x70, 0x03, 0x66, 0xc6, 0x91, 0xfc, 0x45, 0xcd, 0x20, 0x7d, 0xa4, 0xda, 0xb4, 0x3b, 0x12,
	0xf6, 0x58, 0x80, 0x04, 0x09, 0x8d, 0x22, 0xff, 0x2c, 0x9d, 0x45, 0xb6, 0x6e, 0x3b, 0x08, 0xcb,
	0x67, 0x71, 0x59, 0x9f, 0x9e, 0x95, 0x7e, 0x21, 0x85, 0x30, 0x45, 0x72, 0x05, 0x9a, 0x34, 0x39,
	0x0b, 0xfa, 0xea, 0x86, 0x43, 0x6d, 0xa8, 0x84, 0x59, 0xff, 0x65, 0x40, 0x2f, 0x7b, 0xfc, 0x59,
	0x16, 0x36, 0x73, 0x3f, 0xc6, 0xb9, 0x35, 0xcf, 0x6b, 0x16, 0xc8, 0x95, 0x45, 0x5e, 0xfd, 0x8d,
	0x8a, 0x3c, 0xd9, 0x15, 0x99, 0x28, 0xf2, 0xaa, 0x2a, 0xb8, 0x46, 0x55, 0x05, 0x67, 0xfd, 0xac,
	0x0e, 0x8b, 0xf2, 0xd8, 0x8f, 0x63, 0xf6, 0x3c, 0x1c, 0x0e, 0xf1, 0xa1, 0xc1, 0x30, 0x21, 0x2b,
	0x30, 0xed, 0x87, 0x43, 0xc7, 0xf5, 0x62, 0xe5, 0xad, 0xa7, 0xfc, 0x70, 0xb8, 0xed, 0xc5, 0x64,
	0x0d, 0x7b, 0xa8, 0x7e, 0x38, 0xf4, 0xd9, 0x4b, 0xe6, 0x2b, 0x97, 0xad, 0x83, 0xc8, 0x1d, 0x98,
	0x4b, 0xb8, 0xcb, 0xe2, 0x38, 0xbf, 0x8f, 0x96, 0x61, 0xa5, 0x0c, 0x16, 0x73, 0xf9, 0xe1, 0x90,
	0x87, 0x12, 0x8e, 0x2c, 0xb6, 0x6c, 0x1d, 0x44, 0xee, 0x82, 0xd9, 0x0f, 0xfd, 0x30, 0xd6, 0xc9,
	0x64, 0xef, 0x6c, 0x02, 0x2e, 0xd6, 0xa5, 0x7e, 0x12, 0xea, 0xa4, 0xaa, 0x3d, 0x55, 0x02, 0x93,
	0xeb, 0x00, 0x7e, 0x38, 0x3c, 0x1c, 0x0f, 0x12, 0xd6, 0x97, 0x5d, 0xaa, 0xa6, 0xad, 0x41, 0x14,
	0x5f, 0x87, 0xe3, 0x81, 0x94, 0x51, 0xde, 0x42, 0xe9, 0x20, 0xb2, 0x06, 0x33, 0x23, 0x7a, 0xea,
	0x08, 0x15, 0x69, 0x89, 0x12, 0x8c, 0xe8, 0xe9, 0xf3, 0x70, 0x88, 0x09, 0xd2, 0xaf, 0xc1, 0xe5,
	0x84, 0x87, 0x91, 0x20, 0x11, 0x4a, 0x75, 0xbc, 0x81, 0x33, 0x18, 0xfb, 0xbe, 0x23, 0xdc, 0x8b,
	0x74, 0x5e, 0xf6, 0x92, 0x20, 0x50, 0x4a, 0xdf, 0x1d, 0xec, 0x8c, 0x7d, 0x7f, 0xdb, 0x4b, 0x8e,
	0xad, 0x25, 0x58, 0xd8, 0xf2, 0x19, 0x8d, 0xe5, 0x93, 0x70, 0xe1, 0x62, 0x30, 0x89, 0x4e, 0xc1,
	0xd2, 0xff, 0x67, 0xe0, 0x55, 0xe8, 0xe5, 0x60, 0x6c, 0x69, 0x65, 0xb8, 0xbb, 0x7f, 0xdc, 0x28,
	0xe4, 0x50, 0x68, 0x1b, 0xb7, 0xe0, 0x46, 0xf9, 0x37, 0x54, 0x13, 0x3f, 0x68, 0x32, 0x2f, 0x91,
	0x9b, 0xf0, 0xd6, 0x45, 0x64, 0xfb, 0x47, 0x9e, 0x69, 0x54, 0x11, 0x95, 0x7e, 0x5c, 0x63, 0xd6,
	0xc8, 0xdb, 0xb0, 0x56, 0x26, 0x2a, 0xff, 0x5c, 0xc6, 0xac, 0x93, 0xbb, 0x70, 0xbb, 0x4c, 0x55,
	0xfd, 0xcb, 0x19, 0xb3, 0x41, 0x6e, 0x83, 0x35, 0xc1, 0xdb, 0xc4, 0x8f, 0x3f, 0xcc, 0x26, 0x79,
	0x07, 0x6e, 0x96, 0xe9, 0x2a, 0x7e, 0xb7, 0x61, 0x4e, 0x91, 0xeb, 0xb0, 0x5a, 0x2d, 0xec, 0x3e,
	0x77, 0x4f, 0xcc, 0xe9, 0xaa, 0x89, 0x2a, 0x7e, 0xb4, 0x60, 0xb6, 0xaa, 0x26, 0xca, 0x7f, 0x61,
	0x60, 0xb6, 0xab, 0xa4, 0xac, 0xfe, 0x25, 0x80, 0x09, 0xe4, 0x5d, 0xb8, 0x75, 0xce, 0xa2, 0xc5,
	0xe7, 0xf9, 0x66, 0x87, 0x5c, 0x85, 0xf3, 0x7e, 0x17, 0x67, 0xfe, 0xd9, 0xa7, 0x77, 0x7f, 0x51,
	0x53, 0xe9, 0x70, 0xfa, 0xd2, 0x38, 0x7f, 0xa7, 0x9d, 0xbf, 0x1e, 0x36, 0x2f, 0x91, 0x2b, 0xb0,
	0x92, 0x63, 0x0a, 0x2f, 0x71, 0x4d, 0x83, 0x5c, 0x86, 0xa5, 0x49, 0xa4, 0xdc, 0xe0, 0xab, 0xd0,
	0xcb, 0x51, 0xc5, 0x87, 0xa4, 0x66, 0x9d, 0xac, 0xc0, 0x42, 0x8e, 0xcd, 0x9e, 0x34, 0x9a, 0x0d,
	0xb2, 0x0a, 0xcb, 0x1a, 0x42, 0x7b, 0xc3, 0x67, 0x36, 0x8b, 0xab, 0x69, 0x6f, 0xd0, 0xcc, 0xa9,
	0xd2, 0x30, 0xed, 0x79, 0x91, 0x39, 0x5d, 0xe4, 0xa4, 0xf8, 0xa6, 0xc7, 0x6c, 0x95, 0x25, 0x4f,
	0xdf, 0xdf, 0x98, 0x6d, 0x61, 0xc7, 0x39, 0xa6, 0xf2, 0xa1, 0x8a, 0x09, 0x64, 0x19, 0x26, 0x1f,
	0xb8, 0x0b, 0xf5, 0xfe, 0x28, 0xbd, 0x4f, 0x96, 0x5d, 0x69, 0xb2, 0x0c, 0x15, 0x9d, 0x6b, 0xf3,
	0x92, 0x50, 0x44, 0x01, 0x2e, 0x2d, 0xd5, 0x34, 0xee, 0xfe, 0xdc, 0x80, 0xb9, 0x92, 0x63, 0x17,
	0xbc, 0x96, 0x7d, 0xfd, 0xa7, 0x61, 0x20, 0xa6, 0xb9, 0x0c, 0xd5, 0x51, 0xc0, 0x34, 0x84, 0x6a,
	0xca, 0x28, 0xb5, 0x48, 0xad, 0x6a, 0x18, 0xfa, 0x09, 0xb3, 0x4e, 0xae, 0xc1, 0xe5, 0xca, 0x19,
	0xd1, 0xb8, 0x1a, 0xc2, 0xa6, 0xab, 0x67, 0x45, 0x7c, 0xf3, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff,
	0x68, 0x12, 0x38, 0x49, 0xd6, 0x3d, 0x00, 0x00,
}
